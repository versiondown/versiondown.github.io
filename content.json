{"meta":{"title":"ezhq","subtitle":"Live Your Life","description":"ezhq's official website.","author":"ezhq","url":"https://www.ezhq.xyz","root":"/"},"pages":[{"title":"所有分类","date":"2019-12-21T10:29:22.827Z","updated":"2019-03-27T06:49:59.000Z","comments":true,"path":"categories/index.html","permalink":"https://www.ezhq.xyz/categories/index.html","excerpt":"","text":""},{"title":"Source","date":"2019-12-21T09:19:39.245Z","updated":"2019-07-27T02:26:12.000Z","comments":true,"path":"more/index.html","permalink":"https://www.ezhq.xyz/more/index.html","excerpt":"","text":"开发、设计等学习资源区。 也欢迎个人博客入驻~~ –&gt;"},{"title":"所有标签","date":"2019-12-21T10:29:48.504Z","updated":"2019-03-27T06:55:13.000Z","comments":true,"path":"tags/index.html","permalink":"https://www.ezhq.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"FlaskWebDev","slug":"FlaskWebDev","date":"2018-06-16T14:00:00.000Z","updated":"2019-12-21T10:54:47.790Z","comments":true,"path":"2018/06/16/FlaskWebDev/","link":"","permalink":"https://www.ezhq.xyz/2018/06/16/FlaskWebDev/","excerpt":"狗书《Flask Web 开发：基于Python的Web应用开发实践》摘要备忘","text":"狗书《Flask Web 开发：基于Python的Web应用开发实践》摘要备忘 状态: 进行中最新更新: 20180617 第一章：安装1.1 安装Flask 全局安装（不推荐） 1pip install Flask 虚拟环境安装 在想要安装虚拟环境的路径下执行系统powershell终端）。 12345# 下方命令中“venv”为可自定义虚拟环境文件夹名称# 方案一：在当前系统环境所包含的第三方软件包基础之上创建混合环境virtualenv --system-site-packages venv# 方案二：新建全新不含第三方软件包的纯净环境virtualenv venv 启动环境 执行虚拟环境安装路径中的“cativate”文件（powershell终端可执行“activate.ps1”文件）。 1./venv/Scripts/activate.ps1 启动Flask 项目文件设置：设置启动项目文件（当前项目主文件路径下执行下列命令）。 12# name.py为你指定的启动python文件$env:FLASK_APP = \"name.py\" 项目文件设置：设置调试模式。 1$env:FLASK_DEBUG = \"1\" 启动Flask。 1flask run 第二章：程序的基本结构123456789101112131415# Flask程序实例（初始化）from flask import Flaskapp = Flask(__name__)# 路由函数@app.route('/')# 视图函数def index(): return '&lt;h1&gt;Welcome! Aurdes Member&lt;/h1&gt;'# 启动服务器# 确保直接执行此脚本时才启动开发Web服务器if __name__ == '__main__': app.run(debug=True) 2.1 基础程序例子2.1.1 程序实例(初始化) 所有Flask程序都必须创建一个程序实例，程序实例是Flask类的对象。Web服务器使用 WSGI（Web Server Gateway Interface Web服务器网关接口）协议，将客户端发出的所有请求转交此对象进行处理。 2.1.2 路由函数 处理URL和函数之间关系的程序成为 路由(route) 程序实例保存了一个URL到Python函数的映射关系。 修饰器 是Python语言的标准特性，可以使用不同的方式修改函数的行为。通常使用修饰器将函数注册为时间的处理程序。 2.1.3 视图函数 像index()这样的函数成为视图函数（view function）,上方代码中将index()函数注册为根地址处理程序，访问域名后，服务器会执行index()函数，此函数返回值称为 响应 ，响应可以为简单文本，也可以是复杂内容。 2.1.4 启动服务器 启动服务的if判断语句确保直接执行当前脚本文件时候才启动开发Web服务器。如果当前脚本由其他脚本引入，程序会认为引用该脚本的上级脚本（父脚本）会启动其他服务器，便不会启动当前脚本的服务器，即执行app.run()。 2.1.5 访问测试网站 设置好启动文件并通过flask run成功启动服务器后，可以在浏览器地址栏输入http://127.0.0.1:5000/来访问测试网站。 2.2 请求处理2.2.1 上下文 Flask使用上下文让特定的变量在一个线程中全局可访问 线程 是可单独管理的最小指令集。进程 经常使用多个活动线程，有时还会共享内存或文件句柄等资源。多线程服务器会创建一个线程池，线程池中选择一个线程用于处理接收到的请求。 Flask上下文全局变量： 变量名 上下文 说明 current_app 程序上下文 当前激活程序的程序实例 g 程序上下文 处理请求时用作临时存储的对象，每次请求都会重置此变量 request 请求上下文 请求对象，封装了客户端发出的HTTP请求内容 session 请求上下文 用户会话，用于存储请求之间需要“记住”的值的词典 2.2.2 推送与请求 推送 :必须要先经过推送程序和请求上下文，才能分发请求，请求处理完再将其删除。相关信息被推送后，才能正常使用上下文全局变量。 钩子函数: 为了避免在每个视图函数中都使用重复代码，Flask提供了注册通用函数的功能，注册的函数可在请求被分发到视图函数之前或之后调用。Flask支持的4种钩子注册如下： before_first_requet: 在处理第一个请求之前运行 before_request: 在每次请求之前运行 after_request: 如果没有未处理的异常抛出，在每次请求之后运行 teardown_request: 即使有未处理的异常抛出，也在每次请求之后运行 请求钩子函数和视图函数之间共享数据一般使用上下文全局变量g 2.3 响应 视图函数返回值 响应: 响应文本,状态码,字典 。状态码 用来表明不同相应状态。 response 响应 : make_response()函数可接受1、2或3个参数，并返回一个response对象。 重定向 响应: 没有页面文档，将响应引导到一个新的地址。重定向响应可使用3个值形式的返回值，也可在response对象中设置。Flask提供redirect()函数用于重定向响应，如return redirect(&#39;http://www.ezhq.xyz&#39;) abort 响应: 此响应用于处理错误，abort 不会将控制权交还给调用它的函数，而是抛出异常把控制权交给Web服务器。如：abort(404) 2.4 扩展2.4.1 基础扩展添加实例1234567891011121314from flask import Flaskfrom flask.ext.script import Manager# new method# from flask_script import Managerapp = Flask(__name__)manager = Manager(app)@app.route('/')def index(): return '&lt;h1&gt;Hello Veng~~&lt;/h1&gt;'if __name__ == '__main__': manager.run() Flask-Script 为一个Flask扩展，为Flask程序添加一命令行解析器。自带一组常用选项，且支持自定义命令。 pip 形式安装Flask-Script: 激活虚拟环境后执行以下命令进行安装： 1python -m pip install flask-script 有两点需要注意： 在Windows下命令行中，虚拟环境下直接输入书中pip...命令不一定成功，可以使用命令python -m pip...代替。 在国内网络环境下，电脑使用默认DNS有一定几率无法访问到需要下载的网络，可以通过更换电脑默认DNS来解决，DNS推荐（202.141.176.99）。 第三章：模板Jinja2 默认情况下，Flask在程序文件夹中的templates子文件夹中寻找模板。 在python文件中，使用from flask import Flask, render_template命令来实现把Jinja2模板引擎集成到程序中。 render_template函数的第一个参数是模板的文件名。随后的参数是键值对（表示模板中变量对应的真实值），键值对=h号左侧表示参数名（模板中占位符），右侧为当前作用于中的变量（即同名参数的值）。 Jinja2 附: 涉及到的扩展及其安装 Flask-MomentFlask程序扩展，能把 moment.js（可以在浏览器中渲染日期和时间） 集成到 Jinja2 模板中。pip install flask-moment Flask-BootstrapFlask 扩展，简化在程序中继承Bootstrap的过程。Bootstrap 是Twitter开发的一个开源框架，提供的用户界面组件可用于创建简洁有吸引力的网页，并兼容所有现代Web浏览器。Bootstrap是客户端框架（不涉及服务器）.pip install flask-bootstrap Flask-WTFFlask 扩展，将处理 Web 表单的过程简单化，对独立的 WTForm 包进行包装，方便集成到 Flask 中。pip install flask-wtf Flask-SQLAlchemyFlask 扩展，简化在Flask程序中使用 SQLAlchemy 的操作。pip install flask-sqlalchemy Flask-MigrateFlask 扩展，对 Alembic 做了轻量级包装并集成到 Flask-Script中，所有操作都通过Flask-Script命令完成。Alembic 是SQLAlchemy的主力开发人员编写的一个数据库迁移框架，数据库迁移框架能够最终数据库模式的变化，然后增量式地把变化应用到数据库中。pip install flask-migrate Flask-MailFlask 扩展，连接到简单邮件传输协议（SMTP Simple Mail Transfer Protocol）服务器，并把邮件交给此服务器发哦是那个。若不进行配置，着会连接 localhost 上的25端口，无需验证即可发送电子邮件。pip install flask-mail 附2：一些Python命令 pip 升级：python -m pip install --upgrade pip 自动生成项目需求文件：pip freeze &gt;requirements.txt","categories":[{"name":"Python","slug":"Python","permalink":"https://www.ezhq.xyz/categories/Python/"},{"name":"Flask","slug":"Python/Flask","permalink":"https://www.ezhq.xyz/categories/Python/Flask/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.ezhq.xyz/tags/Python/"},{"name":"Flask","slug":"Flask","permalink":"https://www.ezhq.xyz/tags/Flask/"}]},{"title":"HTML与CSS基础课程_学习笔记","slug":"HTML与CSS基础课程_学习笔记","date":"2017-10-18T14:00:00.000Z","updated":"2017-10-18T14:00:00.000Z","comments":true,"path":"2017/10/18/HTML与CSS基础课程_学习笔记/","link":"","permalink":"https://www.ezhq.xyz/2017/10/18/HTML%E4%B8%8ECSS%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"慕课网《HTML与CSS基础课程》学习备忘笔记 状态: 进行中最新更新: 201710126 00：备注00-01：预备知识 无 00-02：学习预期结果 学习HTML、CSS样式基础知识 利用HTML、CSS样式技术制作出简单页面 01：HTML介绍01-01：代码初体验：制作我的第一个网页01-02：HTML和CSS的关系 HTML是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。 CSS样式就是表现。就像网页的外衣。比如，标题字体、颜色变化，或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。 JavaScipt是用来实现网页上的特殊效果。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有焦点新闻（新闻图片）的轮换。可以这么理解，有动画的，有交互的一般都是用JavaScript来实现的。 01-03：认识HTML标签 标题 &lt;h1&gt;标题内容&lt;/h1&gt; 段落 &lt;p&gt;段落内容&lt;/p&gt; 图片 &lt;img src=&quot;图片名字.图片格式&quot;&gt; 01-04：标签语法 HTML标签不区分大小写，&lt;h1&gt;和&lt;H1&gt;作用一样 01-05：认识HTML文件基本结构 &lt;html&gt;&lt;/html&gt;为根标签，所有的网页标签都在&lt;html&gt;&lt;/html&gt;中 &lt;head&gt;标签用于定义文档的头部，是所有头部元素的容器。 头部元素有：&lt;tittle&gt;、&lt;script&gt;、&lt;style&gt;、&lt;link&gt;、&lt;meta&gt;等标签 &lt;body&gt;&lt;/body&gt;之间的内容是网页的主要内容，如&lt;h1&gt;`` &lt;p&gt; ``&lt;a&gt;`` &lt;img&gt;等网页内容标签，在这里的标签中的内容会在浏览器中显示出来 01-06：认识head标签 &lt;head&gt;是文档的头部标签，描述了文档的各种属性和信息，大多数文档头部数据不会作为内容显示给读者 可用在&lt;head&gt;部分的标签： 1234567&lt;head&gt; &lt;title&gt;...&lt;/title&gt; &lt;meta&gt; &lt;link&gt; &lt;style&gt;...&lt;/style&gt; &lt;script&gt;...&lt;/script&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;标签之间的文字内容是网页的标题信息，会出现在浏览器的标题栏中。 01-07：了解HTML的代码注释 &lt;!--注释文字--&gt; 02：认识标签_102-01：语义化 标签学习要点：标签用途，标签在浏览器中的默认样式 语义化：明白每个标签的用途（即在什么情况下使用此标签合理） 语义化的目的：1.更容易被搜索引擎收录 2.更容易让屏幕阅读器读出网页内容 02-02：body标签：网页内容 网页上显示的内容要放在&lt;body&gt;&lt;/body&gt;标签中 02-03：p标签：段落 一段文字一个&lt;p&gt;&lt;/p&gt;标签 &lt;p&gt;标签的默认样式为段前段后都会有空白行 02-04：hx标签：网页标题 &lt;hx&gt;&lt;/hx&gt;为标题标签，x取值为1-6，对应不同等级的标题，&lt;h1&gt;为最高等级标题 &lt;h1&gt;标签一般用在网站名称上 02-05：strong和em标签：强调语气 &lt;em&gt;&lt;/em&gt;表示一般程度强调，被强调内容斜体显示 &lt;strong&gt;&lt;/strong&gt;表示更加强烈的强调，被强调内容默认粗体显示 02-06：span标签：文字单独样式 &lt;span&gt;&lt;/span&gt;为内容单独设置特殊样式,具体样式在&lt;head&gt;标签内&lt;style&gt;标签内通过span{}单独设置 02-07：q标签：短文本引用 &lt;q&gt;&lt;/q&gt;用来引用别处非自己创作的语句，被引用语句无须手动添加双引号，默认被引用内容会被自动添加上双引号 02-08：blockquote标签：长文本引用 &lt;blockquote&gt;&lt;/blockquote&gt;标签用来对大段文字进行引用，对于被引用内容，显示时候会进行左右缩进处理 02-09：br标签：分行显示文本 &lt;br /&gt;放在需要换行的文段末尾，相当于word文档的回车 xhtml1.0写法：&lt;br /&gt; html4.01写法：&lt;br&gt; &lt;br /&gt;标签为空标签，即没有具体HTML内容，类似标签有&lt;br /&gt;、&lt;hr /&gt;和&lt;img /&gt; 在HTML代码中的回车、空格是被直接忽略的 02-10：&nbsp;网页中添加空格 &amp;nbsp;代表文本中的一个空格 02-11：hr标签：添加水平横线 html4.01版本：&lt;hr&gt; html1.0版本（一般使用）：&lt;hr /&gt; 02-12：address标签：网页地址信息 &lt;address&gt;&lt;/address&gt;用来定义一个地址、签名或作者身份等需要在网页中展示出来用于联系的信息 例子：`作者：example &lt;address&gt;标签内容显示样式默认为斜体 02-13：code标签：加入一行代码 &lt;code&gt;&lt;/code&gt;只用于插入一行较短的代码，多行代码用&lt;code&gt;&lt;/code&gt;标签 02-14：pre标签：加入大段代码 &lt;pre&gt;&lt;/pre&gt;标签作用：预格式化文本，在标签中的文本通常会保留空格和换行符，而不必再手动输入&lt;br&gt;``&amp;nbsp;。此标签并不只是为显示计算机源码使用，需要在网页中预显示格式时都可以使用此标签 03：认识标签_203-01：ul标签：无序列表 &lt;ul&gt;...&lt;/ul&gt;标签用来排列无先后顺序的信息列表 语法： 12345&lt;ul&gt; &lt;li&gt;信息&lt;/li&gt; &lt;li&gt;信息&lt;/li&gt; ......&lt;/ul&gt; 03-02：ol标签：有序列表 &lt;ol&gt;...&lt;/ol&gt;标签一般用来进行有先后顺序需要的信息的显示,标签内文本自动标序号 语法： 12345&lt;ol&gt; &lt;li&gt;信息1&lt;/li&gt; &lt;li&gt;信息2&lt;/li&gt; ......&lt;/ol&gt; 03-03：div标签：独立逻辑容器 &lt;div&gt;...&lt;/div&gt;标签用于将相互独立的内容相互分隔开来，如网页中不同栏目 03-04：div id=”…”标签命名 &lt;div id=&quot;&quot;&gt;...&lt;/div&gt;标签用于给标签自定义名称，便于理解使用 用法： 1&lt;div id=\"板块名称“&gt;...&lt;/div&gt; 03-05：table标签：表格 表格标签关键元素：table、tbody、tr、th、td &lt;table&gt;...&lt;/table&gt;:整个标签的最外围 &lt;tbody&gt;...&lt;/tbody&gt;:加上此标签后，此标签包含的内容在下载完后优先显示，而不用等到整个表格加载结束后再显示。若不加此标签，则整个表格加载完之后才会显示。用此标签分段，可以对表格分部分进行尽快显示 &lt;tr&gt;...&lt;/tr&gt;:表格的行，有几对此标签，表格就有几行 &lt;td&gt;...&lt;/td&gt;:表格的列，一行中包含几对此标签，该行就有几列 &lt;th&gt;...&lt;/th&gt;:表格表头，表格头部的一个单元格 表格中列的个数，取决于一行中数据单元格的个数。表头默认粗体居中显示 table表格在没有添加CSS样式之前，在浏览器中没有表格之间的分割线 例子： 1234567891011121314151617181920&lt;table&gt; &lt;tr&gt; &lt;th&gt;产品名称&lt;/th&gt; &lt;th&gt;品牌&lt;/th&gt; &lt;th&gt;库存量（个）&lt;/th&gt; &lt;th&gt;入库时间&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;耳机&lt;/td&gt; &lt;td&gt;联想&lt;/td&gt; &lt;td&gt;500&lt;/td&gt; &lt;td&gt;2008-08-08&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;U盘&lt;/td&gt; &lt;td&gt;金士顿&lt;/td&gt; &lt;td&gt;120&lt;/td&gt; &lt;td&gt;2009-09-09&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 03-06：表格边框 添加CSS代码，为上一小节表格添加边框 添加的部分CSS代码(在head标签内)： 1234567&lt;head&gt;... &lt;style type=\"text/css\"&gt; table tr td,th&#123;border:1px solid #000;&#125; &lt;/style&gt;...&lt;/head&gt; 代码与效果图 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;&lt;title&gt;为表格添加边框&lt;/title&gt;&lt;style type=\"text/css\"&gt;table tr td,th&#123;border:1px solid #000;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;产品名称&lt;/th&gt; &lt;th&gt;品牌&lt;/th&gt; &lt;th&gt;库存量（个）&lt;/th&gt; &lt;th&gt;入库时间&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;耳机&lt;/td&gt; &lt;td&gt;联想&lt;/td&gt; &lt;td&gt;500&lt;/td&gt; &lt;td&gt;2008-08-08&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;U盘&lt;/td&gt; &lt;td&gt;金士顿&lt;/td&gt; &lt;td&gt;120&lt;/td&gt; &lt;td&gt;2009-09-09&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 03-07：caption标签：表格标题和摘要 表格标题：用来描述表格内容，标题默认显示在表格上方 表格标题用法： 123456789&lt;table&gt; &lt;caption&gt;标题文本&lt;/caption&gt; &lt;tr&gt; &lt;td&gt;...&lt;/td&gt; &lt;td&gt;...&lt;/td&gt; ... &lt;/tr&gt;...&lt;/table&gt; 表格摘要：表格摘要的内容不会在浏览器视图中显示出来，它的作用是增加表格的可读性（语义化），使搜索引擎更好地理解表格内容，也可使屏幕阅读器更好地阅读表格内容 表格摘要用法： 1&lt;table summary=\"表格摘要文本\"&gt; 04：认识标签_304-01：a标签：链接 &lt;a&gt;标签用来实现超链接 用法： 1&lt;a href=\"目标网址\" title=\"鼠标划过显示的文本\"&gt;链接显示文本&lt;/a&gt; 带&lt;a&gt;标签的文字会自动默认为蓝色，可以用CSS自定义颜色 &lt;a&gt;标签的超链接默认在当前页面打开，若需要在新标签打开超链接，方法为： 1&lt;a href=\"目标地址\" target=\"_blank\" title=\"鼠标划过显示的文本\"&gt;链接显示文本&lt;/a&gt; 04-02：mailto标签：邮件发送 &lt;a&gt;标签何以搭配&lt;mailto&gt;进行超链接发送邮件，也就是点击某个超链接后，自动打开发送邮件的应用，进行邮件填写与发送 用法： 1&lt;a href=\"mailto:邮箱地址1;邮箱地址2?cc=抄送地址1;抄送地址2&amp;bcc=密件抄送地址1;密件抄送地址2&amp;subject=邮件主题&amp;body=邮件内容\"&gt; 参数解释 mailto：邮箱地址。点击链接后，浏览器会自动调用浏览者系统默认的电子邮件客户端，并在收件人一栏自动填上该关键词设置的收件人的地址 cc：抄送地址 bcc：密件抄送地址 ;：分隔符。用于分隔多个邮箱地址，实现同时发送或抄送给多个人邮件 subject：邮件主题 body：邮件内容 如果mailto后面同时有多个参数，则第一个参数必须以?开头，后续参数相互之间用&amp;分隔开来 04-03：img标签：图片插入 &lt;img&gt;标签用于在网页插入图片 用法： 1&lt;img src=\"图片地址\" alt=\"图片显示失败时显示文本\" title=\"提示文本\"&gt; 参数说明 src：图片的地址 alt：图片的描述性文字，当图片显示失败，会在图片本应显示的地方显示此参数内的文字 title：鼠标划过是显示的文字内容 图片格式可以为GIF、PNG、JPEG 05：与浏览者交互：表单标签05-01：form标签：表单标签 &lt;form&gt;标签用来与访问者进行交互。该标签可以把访问者输入的数据传送到服务器端，使服务器端程序对传回的数据进行处理 用法 123&lt;form method=\"传送方式\" action=\"服务器文件\"&gt;......&lt;/form&gt; 参数解释 &lt;form&gt;...&lt;/form&gt;：表单标签。所有表单内容在此标签内实现 action：表单数据被传输的目的地，可以是一个PHP页面（如save.php） method：表单数据传输方式（get/post），具体实现属于后端 所有表单控件，如文本框、文本域、按钮、单选框、复选框等，都必须放在&lt;form&gt;标签内，否则会使预期完整表单数据无法完整传输 例子 1234567891011121314151617&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;表单标签&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form method=\"post\" action=\"save.php\"&gt; &lt;label for=\"username\"&gt;用户名:&lt;/label&gt; &lt;input type=\"text\" name=\"username\" id=\"username\" value=\"\" /&gt; &lt;label for=\"pass\"&gt;密码:&lt;/label&gt; &lt;input type=\"password\" name=\"pass\" id=\"pass\" value=\"\" /&gt; &lt;input type=\"submit\" value=\"确定\" name=\"submit\" /&gt; &lt;input type=\"reset\" value=\"重置\" name=\"reset\" /&gt;&lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 05-02：input标签：文本输入框、密码输入框 &lt;input&gt;标签：用来进行文本输入或密码输入 用法 123&lt;form&gt; &lt;input type=\"输入类型选择\" name=\"文本框名称\" value=\"输入框默认值设定\" /&gt;&lt;/form&gt; 参数解释 type：输入类型选择。选择值： text：文本输入，正常显示输入的字符 password：密码输入，输入的字符会被黑色实心圆点代替 name：文本框名称，用于后台识别用途 value：文本框默认内容，用于提示 例子 12345678910111213141516&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;文本输入框、密码输入框&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form method=\"post\" action=\"save.php\"&gt; 账户: &lt;input type=\"text\" name\"myName\" value=\"Name\" /&gt; &lt;br&gt; 密码: &lt;input type=\"password\" name=\"pass\" /&gt;&lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 05-03：textarea标签：多行文本输入 &lt;textarea&gt;标签：用来进行大段的文字输入 用法 1&lt;textarea rows=\"行数\" cols=\"列数\"&gt;文本框文字&lt;/textarea&gt; rows和cols这两个参数可以分别用CSS中的width和height代替 例子 123456789101112131415&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;文本域&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=\"save.php\" method=\"post\" &gt; &lt;label&gt;个人简介：&lt;/label&gt; &lt;textarea rows=\"10\" cols=\"50\"&gt;在此处输入具体内容...&lt;/textarea&gt; &lt;input type=\"submit\" value=\"确定\" name=\"submit\" /&gt; &lt;input type=\"reset\" value=\"重置\" name=\"reset\" /&gt;&lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 05-04：radio/checkbox单选框与复选框 radio和checkbox用来进行单选和复选。单选框只能选一项，复选框可以多选或全选 用法 1&lt;input type=\"选择框类型\" value=\"默认内容\" name=\"名称\" checked=\"checked\" /&gt; checked参数为checked时，该选项默认处于被选中状态 同一组的单选按钮，name取值要一致，以便起到同一组单选按钮进行单选的作用 例子 12345678910111213141516&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;单选框、复选框&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=\"save.php\" method=\"post\" &gt; &lt;label&gt;性别:&lt;/label&gt; &lt;label&gt;男&lt;/label&gt; &lt;input type=\"radio\" value=\"1\" name=\"gender\" /&gt; &lt;label&gt;女&lt;/label&gt; &lt;input type=\"radio\" value=\"2\" name=\"gender\" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 05-05：select标签：下拉列表框 &lt;select&gt;标签用来作为下拉列表框，可以单选，也可以多选 用法 123456789&lt;form name&#x3D;&quot;列表框名称&quot;&gt; &lt;label&gt;列表框标题&lt;&#x2F;label&gt; &lt;select multiple&#x3D;&quot;是否多选&quot;&gt; &lt;option value&#x3D;&quot;选项1提交值&quot;&gt;选项1显示值&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;选项2提交值&quot;&gt;选项2显示值&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;选项3提交值&quot;&gt;选项3显示值&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;选项4提交值&quot; selected&#x3D;&quot;默认是否被选择属性&quot;&gt;选项4显示值&lt;&#x2F;option&gt; &lt;&#x2F;select&gt;&lt;&#x2F;form&gt; selected参数选择selected时，默认被选中 multiple参数选择multiple时，列表可进行多选，多选方法为按下Ctrl键同时单击需要多选的选项。不需要多选时候，可以直接不进行此参数配置 例子 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;下拉列表框&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=\"save.php\" method=\"post\" &gt; &lt;label&gt;爱好:&lt;/label&gt; &lt;select multiple=\"multiple\"&gt; &lt;option value=\"看书\"&gt;看书&lt;/option&gt; &lt;option value=\"旅游\" selected=\"selected\"&gt;旅游&lt;/option&gt; &lt;option value=\"运动\"&gt;运动&lt;/option&gt; &lt;option value=\"购物\"&gt;购物&lt;/option&gt; &lt;/select&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 05-06：提交按钮与重置按钮 &lt;input&gt;标签内type参数选择为submit，为提交按钮；若为reset，则为重置按钮 用法：&lt;input type=&quot;submit/reset&quot; value=&quot;按钮显示文字&quot;&gt; 例子 1234567891011121314151617181920&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;重置按钮&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=\"save.php\" method=\"post\" &gt; &lt;label&gt;爱好:&lt;/label&gt; &lt;select&gt; &lt;option value=\"看书\"&gt;看书&lt;/option&gt; &lt;option value=\"旅游\" selected=\"selected\"&gt;旅游&lt;/option&gt; &lt;option value=\"运动\"&gt;运动&lt;/option&gt; &lt;option value=\"购物\"&gt;购物&lt;/option&gt; &lt;/select&gt; &lt;input type=\"submit\" value=\"确定\" /&gt; &lt;input type=\"reset\" value=\"重置\" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 05-07：label标签：鼠标选择 label标签不会向使用者呈现任何特殊效果，当在label标签内选中某条选项文本时，浏览器会自动选中和该label标签相关的表单选项上 当启用label参数时候，在列表中，只要点到对应项的文字，就能选中该选项选框。未启用的话，点击选项的文字无效果，必须点击对应的选框才能选中对应选项 用法：&lt;label for=&quot;控件id&quot;&gt; 例子 1234567891011121314151617181920212223&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;form中的lable标签&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form&gt;&lt;p&gt;你对什么运动感兴趣：&lt;/p&gt;&lt;label for=\"run\"&gt;慢跑&lt;/label&gt;&lt;input type=\"checkbox\" name=\"gender\" id=\"run\" /&gt;&lt;br /&gt;&lt;label for=\"mountain\"&gt;爬山&lt;/label&gt;&lt;input type=\"checkbox\" name=\"gender\" id=\"mountain\" /&gt;&lt;br /&gt;&lt;label for=\"basketball\"&gt;篮球&lt;/label&gt;&lt;input type=\"checkbox\" id=\"basketball\"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 06：开始学习CSS：为网页添加样式06-01：认识CSS样式 CSS全称层叠样式表（Cascading Style Sheets），主要用于定义HTML内容的显示样式，如文字大小、颜色、字体加粗等内容 使用CSS样式化的好处为可以通过定义某个样式，让不同网页位置的文字有着统一的字体、字号或颜色等 用法 123456789101112131415&lt;head&gt;&lt;style type=\"text/css\"&gt;自定义标签名&#123; color:green; 具体样式内容； ......&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt; &lt;自定义标签名&gt;...&lt;/自定义标签名&gt; ......&lt;/body&gt;...... 06-02：基本结构 CSS构成简要说明为选择符{声明}，具体为 12/*注释*/选择符&#123;属性:值&#125; 注释：用`/注释内容/表示，和html的注释`不同 选择符：又称为选择器，指明网页中应用样式规则的元素内容 声明：属性和值之间用英文冒号:隔开，多条声明之间用英文分号;隔开 最后一条声明可以没有分号，可以将各个声明分行写，便于阅读 07：CSS样式基本知识07-01：CSS样式插入方式 CSS样式代码插入方式：内联式、嵌入式、外部式 内联式：将CSS代码直接写在现有HTML标签中 例子：&lt;p style=&quot;color:red;font-size:12px&quot;&gt;实例文段&lt;/p&gt; 注意： 样式代码应写在元素的开始标签中，style的双引号内 有多条CSS样式代码，中间用英文分号;隔开 嵌入式： 将CSS样式代码写在&lt;style type=&quot;text/css&quot;&gt;&lt;/style&gt;标签之间 例子： 1234567......&lt;style type=\"text/css\"&gt;span&#123; color:red;&#125;&lt;/style&gt;&lt;/head&gt; 注意： 嵌入式CSS样式必须写在&lt;style&gt;&lt;/style&gt;标签之间 一般情况下嵌入式CSS样式写在&lt;head&gt;&lt;/head&gt;标签内 外部式：外部式（也称为外联式）就是把CSS代码写在一个单独的外部文件中，这个CSS样式文件扩展名为.css，在&lt;head&gt;标签内使用&lt;link&gt;标签将CSS样式文件链接到HTML文件内 例子：&lt;link href=&quot;base.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt; 注意： CSS样式文件的名称尽量有意义，容易查找 rel=&quot;stylesheet&quot; type=&quot;text/css&quot;是固定写法，无需修改 &lt;link&gt;标签位置一般写在&lt;head&gt;标签内 外部的CSS样式文件内容直接写需要的样式内容，如span{color:red;} 三种方式的优先级（相同权值下） 内联式 &gt; 嵌入式 &gt; 外部式 嵌入式 &gt; 外部式的前提：嵌入式CSS样式在外部式的后面 总体概括：就近原则（距离被设置元素内容越近，样式优先级越高） 08：CSS选择器08-01：选择器、标签选择器 选择器即CSS样式声明中的{}前的部分，选择器指明了{}中的样式作用的对象 标签选择器即HTML代码中的各种标签 08-02：类选择器、ID选择器 类选择器用法：.类选择器名称{CSS样式代码;} 1.使用自定义的标签将想要修饰的内容包含进标签，如&lt;自定义标签&gt;要修饰内容&lt;/自定义标签&gt; 2.使用class=&quot;类选择器名称&quot;对标签设置一个类，如&lt;span class=&quot;类选择器名称&quot;&gt;&lt;/span&gt; 3.设置类选择器的CSS样式具体内容，如.类选择器名称{color:red;} ID选择器用法：ID选择器类似于嵌入式CSS样式和类选择器的结合,ID选择器以井号#开头，在整体头部标签内具体样式格式为#ID名称{样式内容}，在下方使用时候将类选择器中的class换为id即&lt;span id=&quot;ID名称&quot;&gt;要修饰内容&lt;/span&gt; 二者区别： 二者都可以用于任何元素 类选择器在文档中可以使用（引用）多次，ID选择器只能使用（）引用一次 类选择器可以同时引用多个样式，如&lt;span class=类选择器名称1 类选择器名称2&gt;；而ID选择器只能引用一个样式 例子 123456789101112131415161718192021&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;类选择器与ID选择器&lt;/title&gt;&lt;style type=\"text/css\"&gt;.stress&#123; color:red;&#125;#setGreen&#123; color:green;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;span id=\"setGreen\"&gt;TEST&lt;/span&gt; &lt;h1&gt;123&lt;/h1&gt; &lt;p&gt;456&lt;span class=\"stress\"&gt;789&lt;/span&gt;ABC&lt;/p&gt; &lt;p&gt;DEF&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 08-03：子选择器 &gt;子选择器用于指定标签元素的第一个子元素。如.food&gt;li{border:1px solid red;}会使名为food下的子元素li(水果、蔬菜)加上红色实线边框 简言之，就是类选择器多了对特定标签的样式化，仅对正文中引用区域中，被特定标签包含的文段进行样式化 示例代码 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;子选择符&lt;/title&gt;&lt;style type=\"text/css\"&gt;.food&gt;li&#123;border:1px solid red;&#125;/*添加边框样式（粗细为1px， 颜色为红色的实线）*/.first&gt;span&#123;border:1px solid red;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=\"first\"&gt;三年级时，&lt;span&gt;我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩&lt;/span&gt;，上课从来不敢回答老师提出的问题，生怕回答错了老师会批评我。就一直没有这个勇气来回答老师提出的问题。学校举办的活动我也没勇气参加。&lt;/p&gt;&lt;h1&gt;食物&lt;/h1&gt;&lt;ul class=\"food\"&gt; &lt;li&gt;水果 &lt;ul&gt; &lt;li&gt;香蕉&lt;/li&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;梨&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;蔬菜 &lt;ul&gt; &lt;li&gt;白菜&lt;/li&gt; &lt;li&gt;油菜&lt;/li&gt; &lt;li&gt;卷心菜&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 08-04：包含（后代）选择器 包含选择器是对于子选择器的进一步加强作用。子选择器对于指定标签的第一子层级起作用，而包含选择器对于无论是第几层，只要是子层级就会被起作用 用法：.first span{color:red} 注意 子选择器仅指它的直接后代（可理解为子元素的第一代后代）；后代选择器时作用于所有子后代元素 后代选择器通过空格来进行选择；子选择器通过&gt;进行选择 例子(子选择器) 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;后代选择器&lt;/title&gt;&lt;style type=\"text/css\"&gt;.first span&#123;color:red;&#125;.food&gt;li&#123; border:1px solid red;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=\"first\"&gt;123&lt;span&gt;456&lt;/span&gt;789&lt;/p&gt;&lt;ul class=\"food\"&gt; &lt;li&gt;ABC &lt;ul&gt; &lt;li&gt;DEF&lt;/li&gt; &lt;li&gt;GHI&lt;/li&gt; &lt;li&gt;JKL&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;MNO &lt;ul&gt; &lt;li&gt;PQR&lt;/li&gt; &lt;li&gt;STU&lt;/li&gt; &lt;li&gt;VWX&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 例子（包含选择器） 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;后代选择器&lt;/title&gt;&lt;style type=\"text/css\"&gt;.first span&#123;color:red;&#125;.food li&#123; border:1px solid red;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=\"first\"&gt;123&lt;span&gt;456&lt;/span&gt;789&lt;/p&gt;&lt;ul class=\"food\"&gt; &lt;li&gt;ABC &lt;ul&gt; &lt;li&gt;DEF&lt;/li&gt; &lt;li&gt;GHI&lt;/li&gt; &lt;li&gt;JKL&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;MNO &lt;ul&gt; &lt;li&gt;PQR&lt;/li&gt; &lt;li&gt;STU&lt;/li&gt; &lt;li&gt;VWX&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 08-05：通用选择器 *作用为用来匹配HTML中所有标签元素，即所有的标签元素都会默认应用* ｛｝中的样式，只需要在style标签中正常声明就行，在具体内容中无须引用 用法：* {color:red} 08-06：伪类选择符 伪类选择符是用来给标签的某种状态设置（如鼠标滑过）样式，伪类选择符中在a标签上使用的:hover兼容性较好，即a:hover{具体样式}......&lt;a:hover&gt;&lt;/a&gt; 例子 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;伪类选择符&lt;/title&gt;&lt;style type=\"text/css\"&gt;a:hover&#123; color:red; font-size:20px;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;TEST&lt;/h1&gt; &lt;p&gt;123&lt;a href=\"https:www.ezhq.xyz\"&gt;aurdes&lt;/a&gt;456&lt;/p&gt; &lt;p&gt;789&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 08-07：分组选择符 分组选择符为HTML多个标签设置同一个样式 用法：h1,span{具体样式}，在内容中h1``span两个标签的样式会一样 例子 12345678910111213141516&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;分组选择符&lt;/title&gt;&lt;style type=\"text/css\"&gt;.first,span&#123;color:green;&#125;#second&#123;font-size:20px;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;TEST&lt;/h1&gt; &lt;p class=\"first\"&gt;123&lt;span&gt;456&lt;/span&gt;789&lt;/p&gt; &lt;p id=\"second\"&gt;ABC&lt;span&gt;DEF&lt;/span&gt;GHI&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 09：CSS的继承、层叠和特殊性09-01：继承 继承是指样式应用于某个特定标签后，此标签内的其他标签也会被应用此样式，即更次一级的子标签会被套用父层标签的样式 例子1：下面代码会使&lt;p&gt;标签和&lt;span&gt;标签的内容都设置为红色 12p&#123;color:red;&#125;&lt;p&gt;ABC&lt;span&gt;DEF&lt;/span&gt;GHI&lt;/p&gt; 例子2：下面代码回事&lt;p&gt;标签加上红色1像素实心的边框，但&lt;p&gt;标签的子标签&lt;span&gt;并没有被应用此样式 12p&#123;border:1px solid red;&#125;&lt;p&gt;ABC&lt;span&gt;DEF&lt;/span&gt;GHI&lt;/p&gt; 有一些CSS样式不具有继承性，如：border:1px solid red; 例子3： 12345678910111213141516&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;继承&lt;/title&gt;&lt;style type=\"text/css\"&gt;p&#123;color:red;border:1px solid red;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;ezhq&lt;/h1&gt; &lt;p class=\"first\"&gt;ABC&lt;span&gt;DEF&lt;/span&gt;GHI&lt;/p&gt; &lt;p id=\"second\"&gt;JKL&lt;span&gt;MNO&lt;/span&gt;PQR&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 09-02：特殊性/权值 当为同一个标签设定多种样式时候，元素启用哪一个样式，取决于样式的权值 权值规则： 标签权值为1，类选择符为10，ID选择符最高为100，继承的权值极低，可以近似为0 p{color:red;}权值：1 p span{color:red;}权值：1+1=2 .warning{color:red;}权值：10 p span.warning{color:red}权值：1+1+10=12 #footer .note p{color:red;}权值：100+10+1=111 例子 1234567891011121314151617181920&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;特殊性&lt;/title&gt;&lt;style type=\"text/css\"&gt;p&#123;color:red;&#125;.first&#123;color:green;&#125;/*因为权值高显示为绿色*/span&#123;color:pink;&#125;/*设置为粉色*/p span&#123;color:purple;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;ABC&lt;/h1&gt; &lt;p class=\"first\"&gt;DEF&lt;span&gt;GHI&lt;/span&gt;JKL&lt;/p&gt; &lt;p id=\"second\"&gt;MNO&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 09-03：层叠 当权值相同的多个样式作用于同一个标签，会涉及到层叠的问题 在HTML文件中对于同一个元素有多个CSS样式存在，当相同权重的样式存在时，根据这些CSS样式的前后顺序决定，处于最后面的CSS样式会被应用 CSS样式优先级：内联样式表（标签内部） &gt; 嵌入样式表（）当前文件中 &gt; 外部样式表（外部文件中） 例子 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;层叠&lt;/title&gt;&lt;style type=\"text/css\"&gt;p&#123;color:red;&#125;p&#123;color:green;&#125;p&#123;color:pink;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;ABC&lt;/h1&gt; &lt;p class=\"first\"&gt;DEF&lt;span&gt;GHI&lt;/span&gt;JKL&lt;/p&gt; &lt;p id=\"second\"&gt;MNO&lt;span&gt;PQR&lt;/span&gt;STU&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 09-04：重要性 !important用于在特殊情况下需要为某些样式设定最高权值 例子 1234567891011121314151617&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;!important&lt;/title&gt;&lt;style type=\"text/css\"&gt;p&#123;color:red!important;&#125;p.first&#123;color:green;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;ezhq&lt;/h1&gt; &lt;p class=\"first\"&gt;ABC&lt;span&gt;DEF&lt;/span&gt;GHI&lt;/p&gt; &lt;p id=\"second\"&gt;JKL&lt;span class=\"first\"&gt;MNO&lt;/span&gt;PQR&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 注意： !important要放在分号;的前面 当网页制作者不设置CSS样式时候，浏览器会按照自己的默认方式显示网页，并且访问者也可以自定义网页显示效果（如缩放字号等）。整个样式显示优先级为：浏览器默认样式 &lt; 网页制作者定义的样式 &lt; 访问者设置的浏览器显示样式 10：CSS格式化排版 11：CSS盒模型 12：CSS布局模型 13：CSS代码缩写：占用更少的带宽 14：单位和值 15：CSS样式设置小技巧 版权声明创作站点：ezhq.xyz本文作者：ezhq版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"Dev","slug":"Dev","permalink":"https://www.ezhq.xyz/categories/Dev/"},{"name":"Web","slug":"Dev/Web","permalink":"https://www.ezhq.xyz/categories/Dev/Web/"}],"tags":[{"name":"Dev","slug":"Dev","permalink":"https://www.ezhq.xyz/tags/Dev/"},{"name":"Web","slug":"Web","permalink":"https://www.ezhq.xyz/tags/Web/"},{"name":"CSS","slug":"CSS","permalink":"https://www.ezhq.xyz/tags/CSS/"},{"name":"HTML","slug":"HTML","permalink":"https://www.ezhq.xyz/tags/HTML/"}]},{"title":"《UWP开发入门教程》笔记","slug":"《UWP开发入门教程》笔记","date":"2017-08-27T07:00:00.000Z","updated":"2019-03-26T16:00:00.000Z","comments":true,"path":"2017/08/27/《UWP开发入门教程》笔记/","link":"","permalink":"https://www.ezhq.xyz/2017/08/27/%E3%80%8AUWP%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/","excerpt":"UWP入门教程学习笔记。","text":"UWP入门教程学习笔记。 状态: 进行中最新更新: 20170827 【30：总结】UWP-25：Common XAML Controls Part 2 TimePicker 时间选择器 1&lt;TimePicker ClockIdentifier=\"12HourClock\" /&gt; CalendarPicker 日历选择器 1&lt;CalendarDatePicker PlaceholderText=\"choose a date\" /&gt; CalendarView 日期查看 1234567&lt;CalendarView SelectionMode=\"Multiple\" SelectedDatesChanged=\"MyCalendarView_SelectedDatesChanged\" /&gt;private void MyCalendarVie_SelectedDatesChanged(CalendarView sender, CalendarViewSelectedDatesChangedEventArgs args)&#123; var selectedDates = sender.SelectedDates.Select(p =&gt; p.Date.Month.ToString() + )&#125; 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：https://ezhq.xyz/2017/08/27/《UWP开发入门教程》笔记/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"Dev","slug":"Dev","permalink":"https://www.ezhq.xyz/categories/Dev/"},{"name":"UWP","slug":"Dev/UWP","permalink":"https://www.ezhq.xyz/categories/Dev/UWP/"}],"tags":[{"name":"Dev","slug":"Dev","permalink":"https://www.ezhq.xyz/tags/Dev/"},{"name":"UWP","slug":"UWP","permalink":"https://www.ezhq.xyz/tags/UWP/"}]},{"title":"cmd获取历史wifi名称和密码命令","slug":"cmd获取历史wifi名称和密码命令","date":"2017-08-04T02:00:00.000Z","updated":"2017-08-04T02:00:00.000Z","comments":true,"path":"2017/08/04/cmd获取历史wifi名称和密码命令/","link":"","permalink":"https://www.ezhq.xyz/2017/08/04/cmd%E8%8E%B7%E5%8F%96%E5%8E%86%E5%8F%B2wifi%E5%90%8D%E7%A7%B0%E5%92%8C%E5%AF%86%E7%A0%81%E5%91%BD%E4%BB%A4/","excerpt":"","text":"按下组合键 Win + R 在打开的窗口中输入 cmd 并回车 将下列代码复制粘贴到打开的黑色背景的窗口中并回车即可 1for &#x2F;f &quot;skip&#x3D;9 tokens&#x3D;1,2 delims&#x3D;:&quot; %i in (&#39;netsh wlan show profiles&#39;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key&#x3D;clear 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2017/08/04/cmd获取历史wifi名称和密码命令/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"Dev","slug":"Dev","permalink":"https://www.ezhq.xyz/categories/Dev/"},{"name":"PowerShell","slug":"Dev/PowerShell","permalink":"https://www.ezhq.xyz/categories/Dev/PowerShell/"}],"tags":[{"name":"Dev","slug":"Dev","permalink":"https://www.ezhq.xyz/tags/Dev/"},{"name":"PowerShell","slug":"PowerShell","permalink":"https://www.ezhq.xyz/tags/PowerShell/"}]},{"title":"《面向零基础新手的CSharp基础知识》笔记","slug":"面向零基础新手的CSharp基础知识","date":"2017-07-08T10:00:00.000Z","updated":"2019-12-21T10:56:46.252Z","comments":true,"path":"2017/07/08/面向零基础新手的CSharp基础知识/","link":"","permalink":"https://www.ezhq.xyz/2017/07/08/%E9%9D%A2%E5%90%91%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%96%B0%E6%89%8B%E7%9A%84CSharp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"状态：完结最新更新：20170806备注：此课程为C#入门课程，作为UWP开发入门课程的先修基础课程。 第一讲 课程介绍内容简介 主题简介，了解课程预期效果，相关软件下载等准备工作。 VisualStudio 2017下载地址 ：https://www.visualstudio.com/zh-hans/thank-you-downloading-visual-studio/?sku=Community&amp;rel=15 对于VisualStudio 2017安装过程中Windows 10 SDK 安装失败的情况，可以直接下载单独的SDK文件单独安装（安装时候需要退出VisualStudio 2017）。SDK百度云：链接: http://pan.baidu.com/s/1o8x8hXS 密码: vycy 第二讲 创建你的第一个C#程序内容简介 学习如何创建一个简单的应用程序，并获取针对您在开始编写和编译代码时可能会遇到的不同问题的常用解决方案的说明。 简记 编程中各种括号区分()、{}、[]、&lt;&gt; 编程易错点：大小写、中英文符号使用错误、符号使用没有配对、没有以分号结尾…… 要思考的点：1.为什么那样做、做了什么、表象之下发生了什么。2.编程语法规则。 第三讲 了解你的第一个 C# 程序内容简介 为了从较高层面更好地了解 C# 语法，请返回到我们刚刚创建的程序，以便拆分每个关键字和符号。 简记第四讲 使用代码文件、项目和解决方案内容简介了解如何打开和关闭项目中的各个文件、项目和解决方案之间的关系，等等。 简记 Solution Explore 解决方案资源管理器 当前项目位置:文档（Documents）\\Visual Studio（当前使用的版本）\\Projects\\ bin 文件夹为 binary 缩写，表示是二进制执行文件存储文件夹 Debug 文件夹调试应用程序时创建的文件夹，程序创建了一个临时版本的应用程序来进行调试 评估 方法: 一个命名的代码块，你可以通过调用其名称来调用/执行它 源代码的编译结果称为：.NET 程序集 .NET Framework 运行时（CLR）的用途为：它是你的程序在……内运行的内容，可保护用户免受恶意代码的侵害，并处理内存管理和其他运行时任务 第五讲 了解数据类型和变量内容简介 通过浏览基本构造块，向您的词汇表添加 C# 语法︰数据类型和变量。此外，还了解基本主题（例如命名约定和数据类型转换）。 简记 variable 变量 Console.WriteLine()和Console.Write()区别：Console.WriteLine()和Console.Write()都是System.Console提供的方法，都是用来输出的。Console.WriteLine()是把要输出的字符串与换行符一起输出，会输出完毕后将光标移到下一行，而Console.Write()不会换行。 Ctrl + . 更改某个变量后，可以通过此快捷键批量更改同名变量 驼峰式命名法：第一个单词小写，后续单词的首字母大写 让变量名更具描述性与辨识性： 不能对同一个变量定义两次、不要重复使用变量名称（只改改大小写）、遵循命名约定。 合理使用intellisense(智能提示) 第六讲 if判定语句内容简介 获得 if 判定语句以及条件运算符的简介。找出如何重构代码以使其更紧凑且不太可能会产生错误。 简记 范围、在特定范围内部声明变量：本质上说，在一个内部范围内（如一个if语句内部）定义一个变量时，该变量在这个范围之外不可用。换言之，如果我们在一个代码块内部，或一个花括号内部，定义一个变量，则它只在这对花括号内有用，在这对花括号以外不可用。 替换代码 {0} 课堂代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Decisions&#123; class Program &#123; static void Main(string[] args) &#123; /* Console.WriteLine(\"Bob's Big Giveaway\"); Console.Write(\"Choose a door: 1, 2 or 3: \"); string uservalue = Console.ReadLine(); string message = \"\"; if (uservalue == \"1\") &#123; message = \"You won a new car!\"; &#125; else if(uservalue == \"2\") &#123; message = \"You won a new boat!\"; &#125; else if(uservalue == \"3\") &#123; message = \"You won a new cat!\"; &#125; else &#123; message = \"Sorry , we can't understand.\"; message += \" Sorry, you lose.\"; &#125; Console.WriteLine(message); Console.ReadLine(); */ Console.WriteLine(\"Bob's Big Giveaway\"); Console.Write(\"Choose a door: 1, 2 or 3: \"); string uservalue = Console.ReadLine(); string message = (uservalue == \"1\") ? \"boat\" : \"strand of lint\"; //Console.Write(\"You won a \"); //Console.Write(message); //Console.Write(\".\"); //Console.WriteLine(\"You won a &#123;0&#125; .\", message); Console.WriteLine(\"You entered: &#123;0&#125;, therefore you won a &#123;1&#125;.\", uservalue, message); Console.ReadLine(); &#125; &#125;&#125; 第七讲 运算符、表达式和语句内容简介 了解如何创建格式正确的 C# 语句(由包含运算符和操作数的表达式组成)。了解在忽略 C# 的语法规则时出现的编译错误。 简记 操作数、运算符、表达式 对象、类、变量 运算符： +加、-减、*乘、/除 逻辑运算符： and 与、|| 或 Console是一个“类”，而“类”是“容器”，缺少对方法的一个更强大的定义。访问一个类或一个对象的成员方法的方式就是使用英文的 . 符号，此为成员访问运算符。 方法调用运算符，如通过()符号调用一个名为 WriteLine 的方法 评估 表达式由哪几项组成: 操作数和运算符 语句由哪项组成：表达式 第八讲 for迭代语句简介 了解几种不同类型的迭代语句，如何利用“代码段”帮助提示您此复杂语句的语法，并进行调试。 简记 for 迭代语句 F9 设置断点调试 单步执行程序 条件中断调试 出现代码补全提示后 Tab * 2 进行自动代码模板填充，填充并进行条件更改后直接回车可以自动到达代码块编写处。 第九讲 理解数组简介 了解数组并了解如何声明和使用数组。观看几个强大的内置方法(可为数组提供额外的功能)的演示。 简记 数组 相关代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace UnderstandingArrays&#123; class Program &#123; static void Main(string[] args) &#123; /* int number1 = 4; int number2 = 8; int number3 = 15; int number4 = 16; int number5 = 23; if (number1 = 16) &#123; &#125; else if (number2 == 16) &#123; &#125; else if (number3 == 16) &#123; &#125; */ /* int[] numbers = new int[5]; numbers[0] = 4; numbers[1] = 8; numbers[2] = 15; numbers[3] = 16; numbers[4] = 23; //numbers[5] = 42; //Console.WriteLine(numbers[1]); Console.WriteLine(numbers.Length); Console.ReadLine(); */ //int[] numbers = new int[] &#123; 4, 8, 15, 16, 23, 42 &#125;; string[] names = new string[] &#123; \"Eddie\", \"Alex\", \"Michael\" &#125;; /*for (int i = 0; i &lt; names.Length; i++) &#123; Console.WriteLine(names[i]); &#125; Console.ReadLine(); */ /* foreach (string name in names) &#123; Console.WriteLine(name); &#125; Console.ReadLine(); */ //利用数组实现字符串倒置 string zig = \"You can't get what you want out of life \" + \" if you help enough other people get what they want.\"; //创建字符串zig char[] charArray = zig.ToCharArray(); //将字符串zig中的字符复制到字符数组charArrray Array.Reverse(charArray); //反转整个charArray中的项目顺序 foreach (char zigChar in charArray) //循环访问数组charArray &#123; Console.Write(zigChar); &#125; Console.ReadLine(); &#125; &#125;&#125; 评估 正确声明并初始化数组：int[] numbers = {1, 2, 3, 4}; 当尝试访问数组中位于数组范围外部的项目时，会遇到的异常：IndexOutOfRangeException 第十讲 定义和调用方法简介 创建一个帮助器方法，创建和调用方法来检索值，创建和使用输入参数，了解字符串格式设置，并创建重载方法。 简记 方法：由花括号定义的代码块 对于多次复制粘贴的代码块，要仔细检查，保持警惕 本讲需要仔细体会，尤其是重载方法 课堂代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace HelperMethods&#123; class Program &#123; static void Main(string[] args) &#123; Console.WriteLine(\"The Name Game\"); Console.Write(\"What's your first name? \"); string firstName = Console.ReadLine(); Console.Write(\"What's your last name? \"); string lastName = Console.ReadLine(); Console.Write(\"In what city were you born?\"); string city = Console.ReadLine(); DisplayResult(ReverseString(firstName), ReverseString(lastName), ReverseString(city)); Console.ReadLine(); &#125; private static string ReverseString(string message) &#123; char[] messageArray = message.ToCharArray(); Array.Reverse(messageArray); return String.Concat(messageArray); &#125; private static void DisplayResult( string reversedFirstName, string reversedLastName, string reversedCity) &#123; Console.Write(\"Results: \"); Console.Write(string.Format(\"&#123;0&#125; &#123;1&#125; &#123;2&#125;\", reversedFirstName, reversedLastName, reversedCity)); &#125; private static void DisplayResult(string message) &#123; Console.Write(\"Results: \"); Console.Write(message); &#125; &#125;&#125; 评估 应该在何时创建方法：当你需要可能多次重复使用相同的代码时 要创建重载方法，要执行的操作：创建两个或以上具有相同名称，但输入参数数目不同和/或数据类型不同的方法 第十一讲 While迭代语句简介 学习一个新的迭代语句，您可以使用该语句继续执行一个代码块，直到某个条件不再为 true。 简记 前期已学迭代语句回顾：for 循环：能够遍历代码块，预设次数根据计数器来定foreach 迭代语句：能够以一个数组中每一项一次的频率来遍历一个代码块在上面两种迭代语句中，都需要知道有多少次迭代或者要遍历多少次指定的代码块。但是如果事先不知道迭代多少次，或许需要一直迭代，知道满足某个条件为止，可以使用while、do-while do-while 跳出迭代语句之前至少能迭代一次 本讲主要内容：while、do-while while 用处例子：为控制台窗口应用程序创建某类菜单系统 int.Parse() 强制类型转换 Console.Clear() 清屏 Random.Next 方法 (Int32, Int32) 返回在指定范围内的任意整数 while将评估最开始的第一次，但需求实际上可能从不运行。do-while将先执行一次，然后评估条件while() 课堂代码带菜单的打印数字和猜数字游戏 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Whileteration&#123; class Program &#123; static void Main(string[] args) &#123; bool displayMenu = true; while (displayMenu) &#123; displayMenu = MainMenu(); &#125; &#125; private static bool MainMenu() &#123; Console.Clear(); Console.WriteLine(\"Choose an option:\"); Console.WriteLine(\"1) Print Numbers\"); Console.WriteLine(\"2) Guessing Game\"); Console.WriteLine(\"3) Exit\"); string result = Console.ReadLine(); if (result == \"1\") &#123; PrintNumbers(); return true; &#125; else if (result == \"2\") &#123; GuessingGame(); return true; &#125; else if (result == \"3\") &#123; return false; &#125; else &#123; return true; &#125; &#125; private static void PrintNumbers() &#123; Console.Clear(); Console.WriteLine(\"Print Numbers!\"); Console.Write(\"Type a number: \"); int result = int.Parse(Console.ReadLine()); //将读到的字符串转换为int int counter = 1; while (counter &lt;= result) &#123; Console.Write(counter); Console.Write(\"-\"); counter++; &#125; Console.ReadLine(); &#125; private static void GuessingGame() &#123; Console.Clear(); Console.WriteLine(\"Guessing game!\"); Random myRandom = new Random(); //产生随机数 int randowmNumber = myRandom.Next(1, 11); //生成1-11的随机数 int guess = 0; bool incorrect = true; do &#123; Console.WriteLine(\"Guess a number between 1 and 10: \"); string result = Console.ReadLine(); guess++; if (result == randowmNumber.ToString()) &#123; incorrect = false; &#125; else &#123; Console.WriteLine(\"Wrong!\"); &#125; &#125; while (incorrect); Console.WriteLine(\"Correct! It took you &#123;0&#125; guesses.\",guess); Console.ReadLine(); &#125; &#125;&#125; 评估 如果需要.NET 生成一个随机数，可以用：Random类 为什么选择do-while语句：因为需要执行代码块至少一次 为什么应该使用while 迭代语句而非for 迭代语句：因为需要继续循环访问代码块，直到给定条件不再为true 第十二讲 处理字符串简介 了解如何使用内置的 String 方法操作文字字符串内部的内容，并了解如何使用 StringBuilder 类以内存和资源友好的方式将很多字符串串联在一起。 简记 主要内容： 如何使用反斜杠字符进行转义、插入 文字字符串中的转义字符、特殊字符 如何使用 String.Format 标准数字格式字符串（英语） 标准数字格式字符串（中文） 反斜杠字符“\\”特殊性：可以用来转义或者将转义序列插入到文字字符串中，也可以用来将一些特殊字符放入某些换行符中，把东西放入文字字符串中。 真实需要把 \\ 当做字符方法： 使用双重反斜杠: \\\\ 在字符串双引号前使用@声明：@“Test\\” 要是数据显示为数据格式，可以在引用后面跟上冒号和格式符号C：string mySting = string.Format(&quot;{0:C}&quot;, 123.45); 显示为数字格式：string myString = string.Format(&quot;{0:N}&quot;, 123456789) 百分号格式：string myString = String.Format(&quot;Percentage:{0:P}&quot;, .123); 创建自定义格式（格式化自定义电话号码） 1string myString = string.Format(\"Phone Number:&#123;0:(###) ###-####&#125;\",1234567890); 当使用自定义 # 符号来为数字值创建一个自定义格式时候，格式化会从右向左进行。若实际数字多于格式中表示的数字，多余的数字会被推向最左侧的格式。 String.Substring(Int32) 从String中检索，返回忽略前Int32个字符后的字符 String.Substring(Int32,Int32) 从String中检索，忽略前Int32个字符，取出接下来的Int32个字符并丢弃多于的字符 String.ToUpper() 强制大写转换String String.Replace(“a”, “b”) 搜索String中的a并替换为b String.Remove(5, 12) 删除String字符串中5-12字符 String.Trim() 从当前 String 对象移除所有前导空白字符和尾部空白字符 StringBuilder 创建可变字符字符串 课堂代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace WorkingWithString&#123; class Program &#123; static void Main(string[] args) &#123; //string myString = \"My \\\"so-called\\\" life\"; //string myString = \"What if I need a \\nNew line?\"; //string myString = \"Go to your c:\\ drive\"; //string myString = @\"Go to your c:\\ drive\"; //string myString = String.Format(\"&#123;0&#125; = &#123;1&#125;\",\"First\", \"Second\"); //string myString = String.Format(\"&#123;0&#125; = &#123;0&#125;\", \"First\", \"Second\"); //string myString = String.Format(\"&#123;1&#125; = &#123;0&#125;\", \"First\", \"Second\"); //string myString = String.Format(\"&#123;0:C&#125;\", 123.45); //显示货币格式 //string myString = String.Format(\"&#123;0:N&#125;\", 123456789); //显示数字格式 //string myString = String.Format(\"Percentage:&#123;0:P&#125;\", .123); //显示百分比格式 //string myString = string.Format(\"Phone Number:&#123;0:(###) ###-####&#125;\",1234567890); //显示自定义电话格式 //string myString = \" That summer we took threes across the board \"; //myString = myString.Substring(6,14); //抛弃前6个字符，只取后续14个字符 //myString = myString.ToUpper(); //强制大写转换 //myString = myString.Replace(\" \", \"--\"); //搜索替换 //myString = myString.Remove(6, 14); //删除字符 /* myString = String.Format(\"Length before:&#123;0&#125; -- Length after:&#123;1&#125;\", myString.Length, myString.Trim().Length); */ /* string myString = \"\"; for (int i = 0; i &lt; 100; i++) &#123; myString += \"--\" + i.ToString(); &#125; */ StringBuilder myString = new StringBuilder(); for (int i = 0; i &lt; 100; i++) &#123; myString.Append(\"--\"); myString.Append(i); &#125; Console.WriteLine(myString); Console.ReadLine(); &#125; &#125;&#125; 评估 StringBuilder 类有什么用途：提供一种更友好的内存方式来处理字符串 那个字符用于对C#字符串中的绝大多数特殊字符进行转义：反斜杠 下列哪一项不是字符串数据类型的可用方法D A. Trim() B. Replace() C. Append() D. ToUpper() 我想设置这些数字的格式：1234.56 ,使其如 1,234.56 所示，下面那个表达式可以实现这一点A 1234* A. string.Format(&quot;&#123;0:C&#125;&quot;, 1234.56) * B. string.Format(&quot;&#123;0:#,###.##&#125;&quot;, 1234.56) * C. string.Format(&quot;&#123;0:G&#125;&quot;, 1234.56) * D. string.Format(&quot;&#123;0:P&#125;&quot;, 1234.56) 以下代码行的什么问题会导致它无法编译string myString = string.Format(“{2} - {3}”, “3”, “4”, “5”);D A. 有未使用的额外字符串值 B. 大括号中的替换代码是从零开始的，因此”{3}”将在范围之外 C. 替换代码应该使用方括号，而不是花括号 D. 替换代码将不起作用，除非用”{1}”开头 第十三讲 处理日期和时间简介 了解如何使用日期和时间数据，如何创建新的 DateTime实例，如何添加时间，以及如何设置要显示的数据格式。看看 TimeSpan 类 简记 主要内容 时间显示 时间、日期的加、减 通过TimeSpan确定两个日期之间的差值 创建日期的不同方式（创建过去、现在、未来时间）：用DateTime对戏那个构造函数创建时间、用DayTime.parse并传递到一个字符串中 用 . 可以将一个接一个的调用方法连接在一起。例如Console.WriteLinge(myValue.AddDays(3).ToLongDateString()); 课堂代码123456789101112131415161718192021222324252627282930313233343536using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace DatesAndTimes&#123; class Program &#123; static void Main(string[] args) &#123; DateTime myValue = DateTime.Now; //Console.WriteLine(myValue.ToString()); //显示标准当前区域时间 //Console.WriteLine(myValue.ToShortDateString()); //短日期格式 //Console.WriteLine(myValue.ToShortTimeString()); //短时间格式 //Console.WriteLine(myValue.ToLongDateString()); //长日期格式 //Console.WriteLine(myValue.ToLongTimeString()); //长时间格式 //Console.WriteLine(myValue.AddDays(3).ToLongDateString()); //日期加 //Console.WriteLine(myValue.AddHours(3).ToLongTimeString()); //时间加 //Console.WriteLine(myValue.AddDays(-3).ToLongDateString()); //日期减 //Console.WriteLine(myValue.Month); //月份 //DateTime myBirthday = new DateTime(1995, 12, 7); //显示过去时间 //Console.WriteLine(myBirthday.ToShortDateString()); DateTime myBirthday = DateTime.Parse(\"12/7/1969\"); //设定出生日期 TimeSpan myAge = DateTime.Now.Subtract(myBirthday); //计算时间跨度年 Console.WriteLine(myAge.TotalDays); //年转化为天 Console.ReadLine(); &#125; &#125;&#125; 评估 哪种数据类型表示两个特定的DateTime对象之间经过的时间C A. SpannedTime B. ElapsedTime C. TimeSpan D. TimeElapsed 下列哪一项不是初始化新的DateTime对象的有效方式D A. DateTime myValue = DateTime.Parse(“12/7/1969”); B. DateTime myValue = new DateTime(1969, 12, 7); C. DateTime myValue = DateTime.Now; D. DateTime myValue = 12/7/1969; 第十四讲 了解类简介 学习如何定义类和如何创建新实例，如何定义属性，以及如何设置给定类实例的值及获取相应值。 简记 类是相关方法的容器 创建类的短属性模板快速输入：prop + Tab*2 创建类的完整属性模板快速输入：propfull + Tab*2 decimal 为类创建方法 课堂代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace SimpleClasses&#123; class Program &#123; static void Main(string[] args) &#123; Car myCar = new Car(); //创建Car类的实例 myCar.Make = \"Oldsmobile\"; myCar.Model = \"Cutlas Supreme\"; myCar.Year = 1986; myCar.Color = \"Silver\"; Console.WriteLine(\"&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;\", myCar.Make, myCar.Model, myCar.Year, myCar.Color); //decimal value = DetermineMarketValue(myCar); //Console.WriteLine(\"&#123;0:C&#125;\", value); Console.WriteLine(\"&#123;0:C&#125;\",myCar.DetermineMarketValue()); Console.ReadLine(); &#125; private static decimal DetermineMarketValue(Car car) &#123; decimal carValue = 100.0M; //Someda I might look up the car //online webservice to get more //accurtge value. return carValue; &#125; &#125; class Car //创建Car类 &#123; public string Make &#123; get; set; &#125; public string Model &#123; get; set; &#125; public int Year &#123; get; set; &#125; public string Color &#123; get; set; &#125; public decimal DetermineMarketValue() &#123; decimal carValue; if (Year &gt; 1990) &#123; carValue = 10000; &#125; else &#123; carValue = 2000; &#125; return carValue; &#125; &#125;&#125; 评估 下列哪一项不是类声明的一部分D A.重载方法 B.方法 C.属性 D.对象 第十五讲 详细了解类和方法简介 挖掘有关类的更多详细信息:创建新实例，添加类引用，将引用传递到方法。另外，了解重载方法、静态与实例方法以及构造函数。 简记 对象的生存期：对象变得活跃，生存一段时间，然后死亡，从内存中移除。 .NET Framework 运行库及其在对象创建、维护以及最终从内存中移除中所发挥的作用 构造函数是在类的新实例创建时让开发人员能够编写代码的方法 静态方法和属性 每当发出为类创建新实例的命令时（如 Car myCar = new Car(); ），.NET Framework运行库必须启动，在计算机内存中创建一个点，其大小足以容纳“Car”类中的新实例。计算机内存拥有地址。 .NET Framework 的第一个任务是查找没有被占用的可用空地址（目前没有存储、且地址必须足够大，以便存储类的实例）。 然后.NET Framework运行库将创建对象实例，并将把目前存储在这个对象实例中的任何值复制到这个内存地址中，并记录对象所放置的位置。它记录放置对象实例的地址，然后将地址返回给我们，我们用实际名称或类的实例名称（“myCar”）存储此地址 可以通过设置对象为空值（myOtherCar = null;）来实现对象被移除，空值并不是零，也不是空字符串，而是不确定。 每当我们将引用设置为空值，或每当超出范围时，我们将移除对象的所有引用。但.NET Framework 运行库本身会了解何时准备就绪（会在后续某个时间），可以从内存中完全移除这些对象。在大多数情况下，这并不是问题。偶尔会发生问题，可以通过“确定收尾”来明确告知系统立即移除相关对象。 构造函数可以理解为在函数类的模板中提前设置某个值，当类的新实例创建时候默认已经是此值。 过载构造函数 通过调用过载构造函数，可以在实例化时就填写所有值 隐式默认构造函数在编译时生成，没有输入参数，没有方法正文，但可以让你调用，并创建一致的类的新实例 自定义可以让你对实例化的流程具备控制权 处理包含静态成员的类和包含实例成员的类之间存在根本性差异。实例成员像目前为止的教程操作：有一系列属性描述“Car”等给定类的单一实例，可能是在类似于“Car”的构造函数的单一实例中运行的方法。例如静态方法等静态成员，不会实际在某个单一实例中运行，更类似于实用程序，可以随时调用，独立于类的给定实例甚至应用程序的状态，可以随时使用，因为它们并非实际关联某个具体的“Car”，而是适用于所有“Car”，可以随时使用。此为静态成员和实例成员的区别。 上述两者辨别：如果是静态成员，会包含静态关键词，无法引用任何实例。实例成员类似实例属性，甚至作用于实例属性的实例方法，他们需要类的实例方可运行。主要需明白：类中存在两种成员，尽量不要在同一个类中混合使用 本讲总结： 对象生存期 创建了对象的新实例（在计算机内存总创建一个区域，为我们返回引用内存中这一对象的地址） 在对象的生存期内发生了什么情况 当移除对对象的所有引用时，会发生什么情况 .NET Framework 运行库的角色，及其如何记录对对象的引用数量，以便对内存中不再有引用的对象执行垃圾回收，确保有条理，并让内存可供其他应用程序使用或供应用程序再次使用 构造函数，以及开发人员如何在对象创建时用它将对象的新实例设置为有效状态 静态关键词，分析了.NET Framework类库内静态成员的一些用法 在主方法或自身的方法总自行创建静态成员 静态成员和实例成员之间的区别（两者不相容），以及为什么不讨论为什么选择其中一种的原因 课堂代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace ObjectLifeTime&#123; class Program &#123; static void Main(string[] args) &#123; Car myCar = new Car(); Car.MyMethod(); /* myCar.Make = \"Oldmobile\"; myCar.Model = \"Cutlas Supreme\"; myCar.Year = 1986; myCar.Color = \"Silver\"; */ //Car myThirdCar = new Car(\"Ford\", \"Escape\", \"2005\", \"White\"); //调用过载构造函数 /* Car myOtherCar; myOtherCar = myCar; Console.WriteLine(\"&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;\", myOtherCar.Make, myOtherCar.Model, myOtherCar.Year, myOtherCar.Color); myOtherCar.Model = \"98\"; Console.WriteLine(\"&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;\", myCar.Make, myCar.Model, myCar.Year, myCar.Color); myOtherCar = null; Console.WriteLine(\"&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;\", myOtherCar.Make, myOtherCar.Model, myOtherCar.Year, myOtherCar.Color); myCar = null; */ Console.ReadLine(); &#125; &#125; class Car &#123; public string Make &#123; get; set; &#125; public string Model &#123; get; set; &#125; public int Year &#123; get; set; &#125; public string Color &#123; get; set; &#125; /* public Car() &#123; // You could load from a configuration file, // a database, etc. Make = \"Nissan\"; &#125; public Car(string make, string model, int year, string color) //过载构造函数 &#123; Make = make; Model = model; Year = year; Color = color; &#125; */ public static void MyMethod() //静态方法属性 &#123; Console.WriteLine(\"Called the static MyMethod\"); Console.WriteLine(Make); &#125; &#125;&#125; 评估 当前执行范围中不再引用的对象会发生什么情况？B A. 由.NET Framework运行时保留直到将来再次需要 B. 由.NET Framework运行时的垃圾回收器从内存中移除 C. 由操作系统从内存中自动移除 D. 存储在计算机内存的一个称为堆栈的特殊部分中 关于构造函数，以下语句不正确的是B A. 系统会自动为你创建一个默认构造函数（无论你是否意识到） B. 你必须使用 static 关键字来定义构造函数 C. 你可以按照创建任何重载方法所用的方式来创建重载构造函数 D. 当你创建新的类实例时，系统会自动调用构造函数 第十六讲 了解范围和辅助功能修饰符简介 探讨变量范围以及 .NET Framework 类库如何使用辅助功能修饰符向给定类的用户显示或隐藏其给定服务的实现 简记 变量范围 每当在代码块中声明变量时候，这个变量仅在这个代码块、这个代码块的代码块、内部代码块或这个代码块内部的代码块的生存期中活跃。意味着当代码块执行完毕时，在这个代码块内部定义的变量将无法再访问。其值被 .NET Framework 运行库释放。 之前每次创建类时。通常会用 public 关键词，偶尔会用 private 关键词。public 和 private 都是“可访问性修饰符”，用于实施有人参与的面向对象的编程，称为封装，此为总要概念。 简而言之，可以将类想象成“黑盒子”，所有重要的后台、功能应封装在公共方法和公共属性等界面背后。类也可能存在私有字段，或者在幕后使用的私有方法。类的使用者无须知道类的内部运作，也能处理类、运行类。只需知道通过公共方法中的公共属性所公共显示的内容。“私有”意味着可由同一类中的任何其他方法调用。 公共方法可以由类别之外的人、给定类别之外的其他代码调用。私有方法只可由类内部的成员调用。 课堂代码 此课堂代码主要聚焦于检验变量范围如何运作 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace UnderstandingScope&#123; class Program //类class &#123; private static string k = \"\"; //私有静态字符k static void Main(string[] args) &#123; string j = \"\"; //在for循环代码块之外定义j for (int i = 0; i &lt; 10; i++) &#123; j = i.ToString(); k = i.ToString(); Console.WriteLine(i); if (i == 9) &#123; string l = i.ToString(); //在if层面定义l &#125; //Console.WriteLine(l); //无法直接引用l &#125; //Console.WriteLine(i); Console.WriteLine(\"Outside of the for: \" + j); //在for代码块之外访问j Console.WriteLine(\"Outside of the for: \" + k); HelperMethod(); Car myCar = new Car(); myCar.DoSomething(); //调用公共方法\"DoSometing\" Console.ReadLine(); &#125; static void HelperMethod() &#123; Console.WriteLine(\"Value of k from the HelperMethod():\" + k); &#125; &#125; class Car // 类calss： Car ，用来说明封装的概念 &#123; public void DoSomething() //公共方法 &#123; Console.WriteLine(helperMethod()); &#125; private string helperMethod() //私有方法 &#123; return \"Hello world!\"; &#125; &#125;&#125; 评估评估题比较简单，看了本节视频后不会有大问题，略 第十七讲 了解命名空间和如何使用 .NET 类库简介 了解命名空间以及如何通过搜索 Bing 和 MSDN 找到您的应用程序的类 简记 .NET Framework 类库是一系列类的集合，每一个类均包含我们可在应用程序中使用的方法和功能。 .NET Framework 类库将自己包含的代码分为多个文件，这些代码文件称为.NET 程序集。事实上，我们自己编写的程序，也将最终编译成 .NET 程序集。 自行创建类库 完整的 .NET Framework 类库中定义了数万个类，在少数情况下适用了同样的类名称，或至少存在使用同样名称的可能性。如果发生这种情况，创建者需要能够分辨不同的类，因此他们提出了“命名空间”的概念。 命名空间类似于类的“姓氏” 在使用应用程序的过程中，所需的类的全程（如控制台类的全程是 System.Console.WriteLine，即 System.Console 类。）在程序一开始就声明了引用文件，则表示希望每当发现无法识别的类引用时，就查看这些命名空间。若在同一个代码中引用了两个名称相同意义不同的类，则可以使用类的全程来进行区分。 对于代码顶层开头的一系列 using 引用语句，若引用的文件并未在代码中被使用，则会显示为灰色，这些引用删除也可正常编译代码。 为第三方程序集创建引用 网上搜索微软相关代码、文档。关键词** site:microsoft.com 关键词** 课堂代码123456789101112131415161718192021using System;using System.IO;using System.Net;namespace AssembliesAndNamespace&#123; class Program &#123; static void Main(string[] args) &#123; WebClient client = new WebClient(); string reply = client.DownloadString(\"http://msdn.microsoft.com\"); Console.WriteLine(reply); File.WriteAllText(@\"C:\\Time\\Lesson17\\WriteText.txt\", reply); Console.ReadLine(); &#125; &#125;&#125; 评估 命名空间主要是：C A. 一种将方法组织为类的方式 B. 一种将类组织为程序集 的方法 C. 一种消除库中类名称歧义的方式 D. 一种将类组织为项目的方式 第十八讲 创建和添加对程序集的引用简介 了解 .NET 程序集:代码库和可执行文件、程序集的调试和发布版本。另外，了解如何引用程序集，利用 NuGet，并创建对自定义库的引用 简记 为程序集添加引用的三种方法： 来自 .NET Framework 类库的程序集 使用解决方案资源管理器，右键单击引用，然后选择“添加引用”进行添加采用开放源代码，通过名为“NuGet”的特殊工具获取 当需要为之前创建的类库添加引用时 评估 若想创建一个可在多个项目中重复使用的外部代码库，应该D A. 将第二个项目添加到我的解决方案中 B. 创建一个代码库 C. 将一个类添加到我的项目中 D. 创建一个新的类库项目 在项目中使用程序集的第一步是：D A. 将程序集添加到你的项目文件夹 B. 添加一条引用程序集中命名空间的 using 语句 C. 在“项目属性” 页的“引用”选项卡中添加程序集名称 D. 使用“添加引用”对话框添加对程序集的引用 第十九讲 使用集合简介 看到“旧式”集合以及几个利用泛型语法的较新强类型泛型集合(列表 和字典 ) 简记 两种集合：列表（List）和词典（Dictionary） 集合通过一种名为LINQ的语言技术，提供丰富的筛选、排序和聚合功能。LINQ（Language Integrated Query 语言集成查询） ArrayList集合大小是动态的，无需再进行其他诸如一次次分别添加项之类的操作。支持诸如排序等实用功能，可以从集合中移除项 ArrayList存在问题：无法以一种简单的方法来限制将要存储到数组中的数据类型。 集合实质都是泛型的，但需要去规定该集合内允许的数据类型，使其具有针对性。 词典集合与网络搜索词典类似，当你需要查询一个词，你会按照字母顺序来找到它，并找到需要下定义的这个词。一旦找到后，你可以在它的右侧看到相关定义。字典中的每个条目都包含了两个组件：键和值本身。 集合初始值设定语法 集合初始值设定项 总结： 数组和集合间的差别 旧式集合和新式泛型集合：新式泛型集合更先进，能确保我们只能将特定的数据类别加入集合中，以便我们通过传入该集合内允许引用的数据类型，将泛型集合变为特定集合。 对象初始值设定项：是一种简写语法，用于初始化对象的新实例的属性 集合初始值设定项，不仅创建新的集合，还使用汽车集合新实例初始化集合 本节代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106using System;using System.Collections;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace WorkingwithCollectiongs&#123; class Program &#123; static void Main(string[] args) &#123; /* Car car1 = new Car(); car1.Make = \"Oldsmobile\"; car1.Model = \"Cutlas Supreme\"; car1.VIN = \"A1\"; Car car2 = new Car(); car2.Make = \"Geo\"; car2.Model = \"Prism\"; car2.VIN = \"B2\"; Book b1 = new Book(); b1.Author = \"Robert Tabor\"; b1.Title = \"Microsoft .NET XML Web Services\"; b1.ISBN = \"0-000-00000-0\"; */ /* // ArrayLists are dynamically sized, // cool features sorting, remove items ArrayList myArrayList = new ArrayList(); myArrayList.Add(car1); myArrayList.Add(car2); myArrayList.Add(b1); myArrayList.Remove(b1); foreach (Car car in myArrayList) &#123; Console.WriteLine(car.Make); &#125; */ /* // 泛型列表 // List&lt;T&gt; List&lt;Car&gt; myList = new List&lt;Car&gt;(); // 汽车专用数据类型列表 myList.Add(car1); myList.Add(car2); //myList.Add(b1); //无法将书添加到该列表中 foreach (Car car in myList) &#123; Console.WriteLine(car.Model); &#125; */ /* // 词典 // Dictionary&lt;Tkey,Tvalue&gt; Dictionary&lt;string, Car&gt; myDictionary = new Dictionary&lt;string, Car&gt;(); // 创建字典 myDictionary.Add(car1.VIN, car1); // 将汽车数据加入字典 myDictionary.Add(car2.VIN, car2); Console.WriteLine(myDictionary[\"B2\"].Make); // 由特定关键值输出字典数据 */ //string[] names = &#123; \"Bob\", \"Steve\", \"Brian\", \"Chunk\" &#125;; // Object initializer 初始值设定项语法 // No need for a Constructor 无须构造函数 //Car car1 = new Car() &#123; Make = \"BMW\", Model = \"750li\", VIN = \"C3\" &#125;; // 创建变量，创建汽车实例，填充属性 //Ca/r car2 = new Car() &#123; Make = \"Toyota\", Model = \"4Runnner\", VIN = \"D4\" &#125;; // Collection initializer 集合初始值设定项 // 创建集合并添加两个对象，并在每个对象中对所有属性值进行初始化 List&lt;Car&gt; myList = new List&lt;Car&gt;() &#123; new Car&#123;Make = \"Oldsmobile\", Model = \"Cutlas Supreme\", VIN = \"E5\"&#125;, new Car&#123;Make = \"Nissan\" , Model = \"Altima\" , VIN = \"F6\" &#125; &#125;; Console.WriteLine(); &#125; &#125; class Car &#123; public string VIN &#123; get; set; &#125; public string Make &#123; get; set; &#125; public string Model &#123; get; set; &#125; &#125; class Book &#123; public string Title &#123; get; set;&#125; public string Author &#123; get; set;&#125; public string ISBN &#123; get; set; &#125; &#125;&#125; 第二十讲 使用 LINQ简介 观看使用枚举的演示、创建自定义枚举，然后在演示第三个判定语句 (switch) 的简单应用程序中使用该枚举 简记 两种不同的LINQ语法： 用于查询数据库的类似于用于结构化查询语言（SQL）的查询语法 C#开发人员更熟悉的方法语法，但存在较奇怪的明明问题 LINQ查询语法 LINQ方法语法 相关语句 var 关键词为强类型化关键字。与JavaScrip或Visual Basic 含义有所不同。在本讲中表示让编译器来决定正确的数据类型是什么。 orderby select First trueforall 适合于聚合和全部查看以及检验列表中所有项是否都为真 Exists 确定指定的文件是否存在 本节代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace UnderstandingLINQ&#123; class Program &#123; static void Main(string[] args) &#123; List&lt;Car&gt; myCars = new List&lt;Car&gt;() &#123; new Car() &#123; VIN=\"A1\", Make = \"BMW\", Model= \"550i\", StickerPrice=55000, Year=2009&#125;, new Car() &#123; VIN=\"B2\", Make=\"Toyota\", Model=\"4Runner\", StickerPrice=35000, Year=2010&#125;, new Car() &#123; VIN=\"C3\", Make=\"BMW\", Model = \"745li\", StickerPrice=75000, Year=2008&#125;, new Car() &#123; VIN=\"D4\", Make=\"Ford\", Model=\"Escape\", StickerPrice=25000, Year=2008&#125;, new Car() &#123; VIN=\"E5\", Make=\"BMW\", Model=\"55i\", StickerPrice=57000, Year=2010&#125; &#125;; // LINQ query LINQ查询语法 /*// 条件查找 var bmws = from car in myCars where car.Make == \"BMW\" &amp;&amp; car.Year == 2010 select car; */ /*// 按年份排序 var orderedCars = from car in myCars orderby car.Year descending select car; */ // LINQ method 方法语法 // var bmws = myCars.Where(p =&gt; p.Make == \"BMW\" &amp;&amp; p.Year == 2010); // var orderedCars = myCars.OrderByDescending(p =&gt; p.Year); // var firstBMW = myCars.First(p =&gt; p.Make == \"BMW\"); // 输出查找结果第一项 /* var firstBMW = myCars.OrderByDescending(p =&gt; p.Year).First(p =&gt; p.Make == \"BMW\"); // 取按年份排序第一项 Console.WriteLine(firstBMW.VIN); */ //Console.WriteLine(myCars.TrueForAll(p =&gt; p.Year &gt; 2002)); // 判断某个属性是否都符合某个要求 //myCars.ForEach(p =&gt; p.StickerPrice -= 3000); // 从每项基础估价中减去3000 //myCars.ForEach(p =&gt; Console.WriteLine(\"&#123;0&#125;&#123;1:C&#125;\", p.VIN, p.StickerPrice)); // 简短化代码：有序输出并估价 //Console.WriteLine(myCars.Exists(p =&gt; p.Model == \"745li\")); // 检查指定的 745li 是否存在 //Console.WriteLine(myCars.Sum(p =&gt; p.StickerPrice)); // 重点：聚合：所有对象中单个字段的和 Console.WriteLine(myCars.GetType()); var orderedCars = myCars.OrderByDescending(p =&gt; p.Year); Console.WriteLine(orderedCars.GetType()); /* foreach (var car in orderedCars) &#123; Console.WriteLine(\"&#123;0&#125; &#123;1&#125;\", car.Year, car.Model, car.VIN); &#125; */ Console.ReadLine(); &#125; &#125; class Car &#123; public string VIN &#123; get; set; &#125; public string Make &#123; get; set; &#125; public string Model &#123; get; set; &#125; public int Year &#123; get; set; &#125; public double StickerPrice &#123; get; set; &#125; &#125;&#125; 第二十一讲 枚举和 Switch 判定语句简介 观看使用枚举的演示、创建自定义枚举，然后在演示第三个判定语句 (switch) 的简单应用程序中使用该枚举 简记 一个特殊的数据类型：枚举。优势：它们是描述性的，并且能够限制我们的应用程序以及我们的类的属性的可能值数量 评估点:枚举主要用于：限制给定属性或变量可以设置的值的数量 本节代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace EnumsAndSwitch&#123; class Program &#123; static void Main(string[] args) &#123; List&lt;Todo&gt; todos = new List&lt;Todo&gt;() &#123; new Todo &#123; Description = \"Task 1\", EstimatedHours = 6, Status = Status.Completed &#125;, new Todo &#123; Description = \"Task 2\", EstimatedHours = 2, Status = Status.InProgress &#125;, new Todo &#123; Description = \"Task 3\", EstimatedHours = 8, Status = Status.NotStarted &#125;, new Todo &#123; Description = \"Task 4\", EstimatedHours = 12, Status = Status.Deleted &#125;, new Todo &#123; Description = \"Task 5\", EstimatedHours = 6, Status = Status.InProgress &#125;, new Todo &#123; Description = \"Task 6\", EstimatedHours = 2, Status = Status.NotStarted &#125;, new Todo &#123; Description = \"Task 7\", EstimatedHours = 14, Status = Status.NotStarted &#125;, new Todo &#123; Description = \"Task 8\", EstimatedHours = 8, Status = Status.Completed &#125;, new Todo &#123; Description = \"Task 9\", EstimatedHours = 8, Status = Status.InProgress &#125;, new Todo &#123; Description = \"Task 10\", EstimatedHours = 8, Status = Status.Completed &#125;, new Todo &#123; Description = \"Task 11\", EstimatedHours = 4, Status = Status.NotStarted &#125;, new Todo &#123; Description = \"Task 12\", EstimatedHours = 10, Status = Status.Completed &#125;, new Todo &#123; Description = \"Task 13\", EstimatedHours = 12, Status = Status.Deleted &#125;, new Todo &#123; Description = \"Task 14\", EstimatedHours = 6, Status = Status.Completed &#125; &#125;; Console.ForegroundColor = ConsoleColor.DarkRed; PrintAssessment(todos); Console.ReadLine(); &#125; private static void PrintAssessment(List&lt;Todo&gt; todos) &#123; foreach (var todo in todos) &#123; switch (todo.Status) &#123; case Status.NotStarted: Console.ForegroundColor = ConsoleColor.DarkRed; break; case Status.InProgress: Console.ForegroundColor = ConsoleColor.Green; break; case Status.OnHold: Console.ForegroundColor = ConsoleColor.DarkRed; break; case Status.Completed: Console.ForegroundColor = ConsoleColor.Blue; break; case Status.Deleted: Console.ForegroundColor = ConsoleColor.Yellow; break; default: break; &#125; Console.WriteLine(todo.Description); &#125; &#125; &#125; class Todo &#123; public string Description &#123; get; set; &#125; // 待办项描述 public int EstimatedHours &#123; get; set; &#125; // 待办项需要小时数 public Status Status &#123; get; set; &#125; // 状态类型 &#125; enum Status // 状态枚举 &#123; NotStarted, // 尚未开始 InProgress, // 进行中 OnHold, // 暂停 Completed, // 已完成 Deleted // 已删除 &#125;&#125; 第二十二讲 正常处理异常简介 了解如何使用 try catch finally 块预测潜在问题，以使最终用户尽量避免遇到这些问题。探讨检查异常时的最佳做法 简记 File.ReadAllText 打开一个文本 文件，将文件的所有行读入一个字符串，然后关闭该文件 将一些内容包括到 try/catch 中，并且尽量考虑到你有可能要处理的异常，寻找到那些据你所知某个特定方法可能导致的具体异常。 ex.Message 获取描述当前异常的消息 finally 第二十三讲 了解事件和事件驱动编程简介 了解如何在 .NET Framework 类库中使用事件。从使用 Timer 类入手，逐步构建一个基本的 “Hello World” 应用程序 简记 事件驱动编程是Microsoft的presentation API 的核心，无论对于 Web 还是 Windows 都是如此。可以说它是.NET Framework类库中所有其他 API 的核心。它是帮助构建具有真实用户界面的真实应用程序的必经步骤。 利用事件，开发人员能够通过处理应用程序执行生命周期中的关键时刻来作出响应，你可以编写代码来响应出现的事件。 后续分支可学习方向：ASP.net、WPF、UWP 本讲代码cs1234567891011121314151617181920212223242526272829303132333435363738394041using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Timers;namespace TimerExample&#123; class Program &#123; static void Main(string[] args) &#123; Timer myTimer = new Timer(2000); myTimer.Elapsed += MyTimer_Elapsed; // MyTimer_Elapsed的事件附加或注册到Elapsed事件 myTimer.Elapsed += MyTimer_Elapsed1; // 运算符+=作用：指定多少在订阅或被附加到这个事件的当前项也附加上另一个事件处理程序 myTimer.Start(); // 计时器开始 Console.WriteLine(\"Press enter to remove the red event.\"); Console.ReadLine(); myTimer.Elapsed -= MyTimer_Elapsed1; Console.ReadLine(); &#125; private static void MyTimer_Elapsed1(object sender, ElapsedEventArgs e) &#123; Console.ForegroundColor = ConsoleColor.Red; Console.WriteLine(\"Elapsed1:&#123;0:HH:mm:ss.fff&#125;\", e.SignalTime); &#125; private static void MyTimer_Elapsed(object sender, ElapsedEventArgs e) &#123; Console.ForegroundColor = ConsoleColor.White; Console.WriteLine(\"Elapsed:&#123;0:HH:mm:ss.fff&#125;\", e.SignalTime); &#125; &#125;&#125; WPF 布局 代码 123456789101112131415161718192021222324252627282930313233343536373839using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows;using System.Windows.Controls;using System.Windows.Data;using System.Windows.Documents;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Imaging;using System.Windows.Navigation;using System.Windows.Shapes;namespace WPFEvents&#123; /// &lt;summary&gt; /// MainWindow.xaml 的交互逻辑 /// &lt;/summary&gt; public partial class MainWindow : Window &#123; public MainWindow() &#123; InitializeComponent(); button.Click += button_MyOtherClick; &#125; private void button_MyOtherClick(object sender, RoutedEventArgs e) &#123; myOtherLable.Content = \"Hello again!\"; &#125; private void button_Click(object sender, RoutedEventArgs e) &#123; myLabel.Content = \"Hello ezhq.xyz\"; &#125; &#125;&#125; 第二十四讲 下一步该怎么做简介了解解决常见问题的方法，去何处寻求帮助，如何寻找问题的答案，并成为 .NET 社区的一部分。查看详细了解开发应用程序的长期路径 简记 学会搜索 相关提问技巧 寻求帮助去处： MSDN论坛：https://social.msdn.microsoft.com/forums/ 后续学习建议： 诸如SQL serve 的关系数据库知识 学习如何使用.net API的 Entity Framework 部分来访问数据库内存储的信息，访问应用中的数据 不知后续如何，可从HTML5、CSS3 和 JavaScript 入手 一些可供选择的关键词： 面向对象编程 软件开发原理（如驱进原理、YAGNI原则、依赖关系注入（对于使用asp.net core MVC 等来创建某些新型应用程序非常重要）、SOLID（每个字母代表一个不同的次级原理，帮助你意识到你的应用程序中的面向对象的编程的可能）） 软件开发的过程、有关软件开发和管理软件项目的工作流程（即团队工作时需要用到的特定工具和技术，利用 Git 或 Visual Studio Online等源代码存储库或是团队自己的内部源代码存储库工具来与团队成员分享、执行或获得源代码） 构建单元测试 敏捷项目管理、敏捷软件开发、迭代开发的性质 附1：语法集合 String.ToCharArray方法() Array.Reverse方法(Array) foreach in int32.Parse(String) Console.Clear Random Random.Next(Int32, Int32) String.Format String.Substring(Int32) String.Substring(Int32,Int32) String.ToUpper() String.Replace(Char, Char) String.Remove(Int32, Int32) String.Trim() StringBuilder 标准数字格式字符串（英语） 标准数字格式字符串（中文） decimal Var orderby select First trueforall Exists File.ReadAllText ex.Message finally 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2017/07/08/面向零基础新手的CSharp基础知识/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"慕课笔记","slug":"慕课笔记","permalink":"https://www.ezhq.xyz/categories/%E6%85%95%E8%AF%BE%E7%AC%94%E8%AE%B0/"},{"name":"C#","slug":"慕课笔记/C","permalink":"https://www.ezhq.xyz/categories/%E6%85%95%E8%AF%BE%E7%AC%94%E8%AE%B0/C/"}],"tags":[{"name":"慕课笔记","slug":"慕课笔记","permalink":"https://www.ezhq.xyz/tags/%E6%85%95%E8%AF%BE%E7%AC%94%E8%AE%B0/"},{"name":"C#","slug":"C","permalink":"https://www.ezhq.xyz/tags/C/"}]},{"title":"MDN“学习Web开发”教程中网站提交的补充","slug":"MDN“学习Web开发”教程中网站提交的补充","date":"2017-04-16T14:00:00.000Z","updated":"2017-04-16T14:00:00.000Z","comments":true,"path":"2017/04/16/MDN“学习Web开发”教程中网站提交的补充/","link":"","permalink":"https://www.ezhq.xyz/2017/04/16/MDN%E2%80%9C%E5%AD%A6%E4%B9%A0Web%E5%BC%80%E5%8F%91%E2%80%9D%E6%95%99%E7%A8%8B%E4%B8%AD%E7%BD%91%E7%AB%99%E6%8F%90%E4%BA%A4%E7%9A%84%E8%A1%A5%E5%85%85/","excerpt":"","text":"最新更新：20170416 简要说明 这篇博客是关于 MDN &gt; 学习Web开发 &gt; Web开发入门 &gt; 发布网站 这一教程的补充。 补充/解决问题内容：用 Git 发布之前做好的网站的过程实现。 问题说明MDN中关于网站发布选用的方法是使用在线工具GitHub，本身并没有什么问题，对于入门者也比较合适（免费，方便，实现过程容易描述）。但是教程对于提交网站文件的描述是较为模糊的。在亲自按照教程实现后，发现有很大几率并不能实现教程设想的结果。问题点： 教程中是直接用命令行提交的网站文件，但是对于计算机和自己的GitHub账号绑定并设置密钥没有提及，而这个又会影响到网站文件的提交。 此情况适用于自己电脑在之前并没有安装过Git及绑定GitHub账号的情况。 问题解决 Git安装这个步骤按照教程走没太大问题，直接安装Git即可。GitHub建立仓库也没太大问题，需要注意的是Repository name 填写的时候要准确填写自己的GitHub用户名（若你的用户名为“John”,则填写内容为“John.github.io”）.然后点击“Create repository”创建仓库即可。 将文件上传到 GitHub教程中这部分是容易出问题的地方。按照教程来走，很容易失败，达不到最终理想效果。在参照教程中“将文件上传到GitHub”这部分之前，最好先进行下面步骤3“绑定GitHub账号”的操作。 绑定GitHub账号 打开Git命令窗口：在桌面右键，选择“Git Bash Here”，打开命令窗口。 创建密钥步骤1：输入命令 ssh-keygen -t rsa -C &quot;your_email@example.com&quot;(操作中要将命令中双引号里的your_email@example替换为你自己GitHub绑定的邮箱地址)。 创建密钥步骤2: 当窗口弹出 Enter file in which to ... 的命令时候，可以直接按下回车Enter键即可；然后弹出 Enter passphrass ... 时可以直接按下回车键；弹出 Enter same passphrase ... 时直接按下回车键。 此时命令窗口会显示 Your identification has been ... 的信息，这时候输入命令 clip &lt; ~/.ssh/id_rsa.pub 并回车（此步骤是复制公钥信息以备下个步骤使用）。 给自己GitHub账号添加SSH密钥信息：在GitHub网站主页点击右上角自己的头像，在弹出的菜单中选择“Settings”,在新的网页中左侧列表里选择“SSH and GPG keys”,然后在右侧点击绿色按钮“New SSH key”,在出现的界面中Tittle里随意填写个名字（如MDNWebSSH），在Key框内直接进行粘贴操作即可（在框内鼠标右键点击，选择“粘贴”即可，因为上一个步骤里已经通过命令行复制了相关信息），最后点击下面的绿色按钮“Add SSH key”即可。 提交网站文件 在自己的网站文件夹里，右键选择“Git Bash Here”打开Git命令窗口。 对于MDN教程中“将文件上传到GitHub”步骤一 cd Desktop... 的命令可以忽略。 之后的命令从步骤二中的“git init”开始可以往后，可以直接参照教程进行操作，就不会有太大问题。 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2017/04/16/MDN“学习Web开发”教程中网站提交的补充/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"Dev","slug":"Dev","permalink":"https://www.ezhq.xyz/categories/Dev/"},{"name":"Web","slug":"Dev/Web","permalink":"https://www.ezhq.xyz/categories/Dev/Web/"}],"tags":[{"name":"Dev","slug":"Dev","permalink":"https://www.ezhq.xyz/tags/Dev/"},{"name":"Web","slug":"Web","permalink":"https://www.ezhq.xyz/tags/Web/"},{"name":"Git","slug":"Git","permalink":"https://www.ezhq.xyz/tags/Git/"}]},{"title":"《Systems Analysis and Design》4th——John Satzinger Roert Jakson Stephen Burd","slug":"SystemsAnalysisAndDesign4th","date":"2017-01-13T14:00:00.000Z","updated":"2019-12-21T10:56:46.252Z","comments":true,"path":"2017/01/13/SystemsAnalysisAndDesign4th/","link":"","permalink":"https://www.ezhq.xyz/2017/01/13/SystemsAnalysisAndDesign4th/","excerpt":"","text":"最新更新：20170309 第一部分 系统分析员第一章 信息系统分析员涉及的领域章节内容 1.1 解决业务问题的分析员 第二章 系统开发方法第三章 项目经理级的分析员第二部分 系统分析任务第四章 开始分析：调查系统需求第五章 系统需求建模第六章 需求的传统描述方法第七章 需求的面向对象描述方法第八章 需求、环境与实施的候选方案评估第三部分 系统设计任务第九章 进入系统设计第十章 传统设计方法第十一章 面向对象设计方法：用例实现第十二章 数据库设计第十三张 用户界面的设计第十四章 系统界面、控制和安全的设计第四部分 实现与支持第十五章 使系统可操作化第十六章 系统开发中的当前趋势 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2017/01/13/SystemsAnalysisAndDesign4th/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"阅读笔记","slug":"阅读笔记","permalink":"https://www.ezhq.xyz/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"},{"name":"计算机系统","slug":"阅读笔记/计算机系统","permalink":"https://www.ezhq.xyz/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"阅读笔记","slug":"阅读笔记","permalink":"https://www.ezhq.xyz/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"},{"name":"计算机系统","slug":"计算机系统","permalink":"https://www.ezhq.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"}]},{"title":"Hexo博客Next主题加入网易云音乐播放器","slug":"Hexo添加网易云音乐","date":"2016-12-24T14:00:00.000Z","updated":"2016-12-24T14:00:00.000Z","comments":true,"path":"2016/12/24/Hexo添加网易云音乐/","link":"","permalink":"https://www.ezhq.xyz/2016/12/24/Hexo%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/","excerpt":"","text":"最新更新：20170309 一 简要介绍本方法适用于对Hexo框架网站添加网易云音乐播放器插件，本例在Hexo框架的Next主题下进行，将网易云音乐插件添加到侧边栏上。另外，浏览器广告拦截插件有一定几率造成插件不加载。 二 选择音乐 在网易云音乐网页版上选择想要布置的音乐（这里以Family of the Year的《Hero》为例）； 在歌曲详细页上点击“生成外链播放器”； 对插件进行个性化修改（建议为了网站浏览体验，，取消自动播放），并点击“复制代码”； 三 修改网页样式文件 打开本地网页Hexo文件夹内的sidebar.swig文件，具体目录为：Hexo\\themes\\Next\\layout_macro\\sidebar.swig（注：本路径中Next为自己的网页主题文件夹名，不同主题名称不同，路径都类似。） 在打开的sidebar.swig文件如图合适位置上粘贴上面复制的代码。 在主目录下执行Git Bash命令,完成修改后文件上传：123hexo cleanhexo ghexo d 四 最终效果 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2016/12/24/Hexo添加网易云音乐/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"Guide","slug":"Guide","permalink":"https://www.ezhq.xyz/categories/Guide/"},{"name":"Hexo","slug":"Guide/Hexo","permalink":"https://www.ezhq.xyz/categories/Guide/Hexo/"}],"tags":[{"name":"Guide","slug":"Guide","permalink":"https://www.ezhq.xyz/tags/Guide/"},{"name":"Hexo","slug":"Hexo","permalink":"https://www.ezhq.xyz/tags/Hexo/"}]},{"title":"《Arduino Workshop(动手玩转Arduino)》—— John Boxall","slug":"ArduinoWorkshop","date":"2016-11-22T14:00:00.000Z","updated":"2016-11-22T14:00:00.000Z","comments":true,"path":"2016/11/22/ArduinoWorkshop/","link":"","permalink":"https://www.ezhq.xyz/2016/11/22/ArduinoWorkshop/","excerpt":"关于Arduino，关于硬件。文章较长，PC环境下浏览体验更佳。","text":"关于Arduino，关于硬件。文章较长，PC环境下浏览体验更佳。 最新更新：20170309 一 起步章节内容 简要介绍 Arduino 能做什么以及一些作品 Arduino 集成开发环境(IDE)的安装 关于 Arduino 使用的一些安全提示 所需的软件Arduino IDE 官方下载页面（包含各系统对应版本） Windows XP 及后续版本 Windows 版本的Arduino IDE 下载后为一个压缩包，解压后即为软件以及相关文件，无需安装过程。可以将软件包放到自己想要放到的位置，然后直接为软件包内的 arduio.exe 创建一个桌面快捷方式即可。 软件下载并解压好后需要安装驱动才可进行后续工作。 不能忘记在IDE软件内设置 Arduino 的型号和串口号。 Tips：软件语言可以设置为英文或中文。在软件菜单 File —— Preference 中设置。 安全 Arduino 几乎不需要用到市电。 二 探索 Arduino 板和 IDE章节内容 介绍基本Arduino板上主要小部件 Arduino IDE 简要介绍 Arduino 程序的基本结构以及检查和修改 Arduino 板 带 ~ 符号的引脚都可以进行模拟信号的操作。 引脚A4、A5和引脚0、1均也是串口，可以用来与其他器件发送和接收数据。 使用多个盾板时，要记住每块盾板都用了哪些引脚，避免相互引起冲突。 在 IDE 里创建第一个程序setup 函数 setup 函数只在每次开机或重启时执行一次。 loop 函数 loop 函数是程序运行期间持续循环运行的部分。 Arduino IDE 不会自动保存当前文件，需要经常手动保存当前文件。 引脚控制中，HIGH 和 LOW 可以分别用 1 和 0 代替，效果一样。 检查程序 程序出错时，错误一般出在高亮标识的那一行或前一行。 三 第一步电子元件电阻 电阻阻值读法： 第一环*：标示阻值的第一个数字 第二环*：标示阻值的第二个数字 第三环*：标示倍数（如果共有4环）或第三个数字（共有5环） 第四环*：一共有5环的倍数 第五环*：表示误差（精度） 电阻色环颜色对应数值 颜色* —— 欧姆黑色——0棕色——1红色——2橙色——3青色——4绿色——5蓝色——6紫色——7灰色——8白色——9 发光二极管 使用LED的过程中要考虑到 LED 的工作电压和电流 红色LED一般需要 1.7V 电压和 5~12mA 的电流 Arduino 的输出为 5V，以及能输出大的多的电流 不太确定的情况下可选择阻值稍大一些的电阻 面包板 使用面包板要明确面包板的插孔内部是如何连接的 作品1：做出闪烁的LED波算法 点亮 LED 1 等待半秒 熄灭 LED 1 点亮 LED 2 等待半秒 熄灭 LED 2 持续重复上述步骤直至 LED 5 被点亮，然后从 LED 5 做到 LED 1 不停地重复 元件 Arduino 和 USB连接线 5个 LED 5个 560Ω 左右的电阻 一块面包板 若干连接线 程序1234567891011121314151617181920212223242526272829303132333435363738// ArduionWorkshop_Work1_闪烁的LED波// ezhq_16/11/25void setup()&#123; pinMode(2,OUTPUT); // 设置数字引脚2~6为输出 pinMode(3,OUTPUT); pinMode(4,OUTPUT); pinMode(5,OUTPUT); pinMode(6,OUTPUT);&#125;void loop()&#123; digitalWrite(2,HIGH); //点亮 LED 1 delay(500); //等待半秒 digitalWrite(2,LOW); //熄灭 LED 1 digitalWrite(3,HIGH); //按同样规律点亮剩余LED灯 delay(500); digitalWrite(3,LOW); digitalWrite(4,HIGH); delay(500); digitalWrite(4,LOW); digitalWrite(5,HIGH); delay(500); digitalWrite(5,LOW); digitalWrite(6,HIGH); delay(500); digitalWrite(6,LOW); //从LED5 开始反向进行 digitalWrite(5,HIGH); delay(500); digitalWrite(5,LOW); digitalWrite(4,HIGH); delay(500); digitalWrite(4,LOW); digitalWrite(3,HIGH); delay(500); digitalWrite(3,LOW); //程序会从开头循环运行&#125; 电路作品2：用for 循环做重复动作 作品2中，第二个for循环中，将“a&gt;1”改为“a&gt;2”,会使得最终效果更顺畅自然。 1234567891011121314151617181920212223242526272829// ArduionWorkshop_Work2_用 for 循环做重复动作// ezhq_16/11/25int d = 100;void setup()&#123; pinMode(2,OUTPUT); // 设置数字引脚2~6为输出 pinMode(3,OUTPUT); pinMode(4,OUTPUT); pinMode(5,OUTPUT); pinMode(6,OUTPUT);&#125;void loop()&#123; for ( int a = 2; a &lt; 7; a++) &#123; digitalWrite(a, HIGH); delay(d); digitalWrite(a, LOW); delay(d); &#125; for ( int a = 5; a &gt; 2; a--) &#123; digitalWrite(a, HIGH); delay(d); digitalWrite(a, LOW); delay(d); &#125;&#125; 用脉冲宽度调制变化LED的亮度 PWM(Pulse Width Modulation)脉冲宽度调制/脉宽调制 Aruino 的 PWM 大约每秒500次的速度切换 LED 亮灭来形成各种来形成各种亮度 亮度的变化由数字输出引脚输出高电平的时间和低电平的时间的比值不同来实现（占空比） 产生 PWM 信号，所用函数为analogWrite(x, y), x 为数字引脚编号；y 为占空比的比值，范围为 0~255，255 表示 100% 占空比。 作品3：演示PWM12345678910111213141516171819202122// ArduionWorkshop_Work3_演示PWM// ezhq_16/11/25int d = 5;void setup()&#123; pinMode(3,OUTPUT); // LED 控制引脚3，3是具有带有 PWM 功能的引脚&#125;void loop()&#123; for ( int a = 0; a &lt; 256; a++) &#123; analogWrite(3, a); delay(d); &#125; for ( int a = 255; a &gt;=0; a--) &#123; analogWrite(3, a); delay(d); &#125; delay(d);&#125; 更多的电子元件晶体管 使用晶体管一定要确定晶体管的管脚排列，正确连接管脚 整流二极管 整流二极管的负极为标有黑色环的一端 继电器高压电路 高压电路注意保护电路的安排，以免损害设备器件 四 构建模块电容数字输入 使用开关时要注意开关抖动现象的存在并对此情况进行考虑 作品4：演示数字输入12345678910111213141516171819202122// ArduionWorkshop_Work4_演示数字输入// ezhq_17/01/11// 注：若没有电容，可以直接在开关输出引脚处直接外加一个220R的电阻到GND#define LED 12#define BUTTON 7void setup()&#123; pinMode(LED, OUTPUT); pinMode(BUTTON, INPUT);&#125;void loop()&#123; if ( digitalRead(BUTTON) == HIGH) &#123; digitalWrite(LED,HIGH); delay(500); digitalWrite(LED,LOW); &#125;&#125; 注：若没有电容，可以直接在开关输出引脚处直接外加一个220R的电阻到GND实现去除抖动的作用 五 使用函数 六 数字、变量和算术 七 液晶显示器 八 扩展 Arduino 九 数字键盘 十 用触摸屏获得用户输入 十一 认识 Arduino 系列 十二 电机和运动 十三 用 Arduino 接 GPS 十四 无线数据通信 十五 红外遥控 十六 读RFID 标签 十七 数据总线 十八 真实时钟 十九 互联网 二十 手机通信 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2016/11/22/ArduinoWorkshop/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"Read","slug":"Read","permalink":"https://www.ezhq.xyz/categories/Read/"},{"name":"Arduino","slug":"Read/Arduino","permalink":"https://www.ezhq.xyz/categories/Read/Arduino/"}],"tags":[{"name":"Read","slug":"Read","permalink":"https://www.ezhq.xyz/tags/Read/"},{"name":"Arduino","slug":"Arduino","permalink":"https://www.ezhq.xyz/tags/Arduino/"}]},{"title":"系统hosts文件修改教程","slug":"系统hosts文件修改教程","date":"2016-11-11T09:30:00.000Z","updated":"2019-12-21T10:56:46.252Z","comments":true,"path":"2016/11/11/系统hosts文件修改教程/","link":"","permalink":"https://www.ezhq.xyz/2016/11/11/%E7%B3%BB%E7%BB%9Fhosts%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9%E6%95%99%E7%A8%8B/","excerpt":"","text":"提示本教程不提供任何hosts文件，也不提供任何翻墙之类的软件或文件，相关文件自行网络搜索，使用之前请自行确保文件的安全性，本教程不对此方法的后果负责。 前言只要一碰到无法正常浏览网络，正常使用Google、twitter、facebook等国外网站，搜索相关解决方法，都会在网上搜索到一种名为“修改系统hosts文件”的方法。到底如何操作，如何进行相关系统文件的更改？本文段即对此操作流程进行说明。废话不多所，开始教程。 需要文件 网络寻找好的hosts（自行google或百度相关站点搜索下载）。 本地hosts文件复制本地文件准备将本地电脑的hosts文件复制到桌面，准备进行下一步的编辑。hosts文件位于本地电脑的位置：C:\\Windows\\System32\\drivers\\etc ，在这个etc文件夹内，有个没有后缀名的hosts文件，将它复制到桌面一份。不要急着将这个窗口关闭，后续要用到。 下载文件的编辑将下载的hosts文件打开，打开方式选择记事本（右键——打开方式——记事本），在打开的记事本中，找到 # Modified hosts start 这一行，从此行#号前面开始到最后结尾处，选中这一部分进行复制（在#号前面点一下鼠标，拖动右侧滑块到最下方，然后按住键盘Shift按键不放，同时在最后一个字母处点击鼠标左键，即可选中这一部分，然后直接松开Shift，并随后同时按下Ctrl和C两个按键，即可完成复制）。 本地文件的编辑将复制到桌面的hosts文件打开，打开方式选择记事本，在文档最后面另起一行（为了以后更改此处文件方便，可以另起一行后输入十来个#号，然后另起一行再输入十来个#号，最后再另起一行准备下一步操作。这些符号会被系统自动忽略，但是可以让自己以后便于寻找位置。）对上一步复制的文段进行粘贴（同时按下键盘Ctrl和V两个按键）然后直接对此文件进行保存（不要修改文件名，弹出文件重名的话，选择替换）。 使修改后的本地文件生效第3步中已经将原先的hosts文件修改了。接下来，直接将修改后的hosts文件拖到第1步中的etc文件夹中，若有“替换或跳过文件”的提示，则选择“替换目标中的文件”，若有“你需要提供管理员权限才能移动到此文件夹”的提示，则选择继续即可。然后即可正常访问相关网站。 扫尾工作第1步中的文件窗口可以关闭，网上下载的hosts文件可以直接删除了。更改hosts文件至此结束。 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2016/11/11/系统hosts文件修改教程/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"软件","slug":"软件","permalink":"https://www.ezhq.xyz/categories/%E8%BD%AF%E4%BB%B6/"},{"name":"教程","slug":"软件/教程","permalink":"https://www.ezhq.xyz/categories/%E8%BD%AF%E4%BB%B6/%E6%95%99%E7%A8%8B/"},{"name":"科学上网","slug":"软件/教程/科学上网","permalink":"https://www.ezhq.xyz/categories/%E8%BD%AF%E4%BB%B6/%E6%95%99%E7%A8%8B/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://www.ezhq.xyz/tags/%E6%95%99%E7%A8%8B/"},{"name":"软件","slug":"软件","permalink":"https://www.ezhq.xyz/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"科学上网","slug":"科学上网","permalink":"https://www.ezhq.xyz/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}]},{"title":"《C Primer Plus》5th——Stephen Prata","slug":"CPrimerPlus5th","date":"2016-10-22T14:00:00.000Z","updated":"2016-10-22T14:00:00.000Z","comments":true,"path":"2016/10/22/CPrimerPlus5th/","link":"","permalink":"https://www.ezhq.xyz/2016/10/22/CPrimerPlus5th/","excerpt":"","text":"最新更新：20170708 第一章 初识C语言章节内容 C的历史和特性 编写程序所需的步骤 关于编译器和链接器的一些知识 C的标准 1.1 C语言的起源 编程语言的目标具有一定的参考意义，可以明白为何采用它。 1.2 使用C语言的理由 C语言的特性：控制结构、快速、紧凑、可移植、自由度高。 1.3 C语言的应用范围1.4 计算机能做什么 计算机基本组成中央处理单元CPU（Central Processing Unit）：负责绝大多数计算机的计算工作。随机访问存储器RAM（Random Access Memory）：保存运行的程序和文件，与CPU直接诶交换数据。永久存储器：保存计算机数据。外围设备：键盘、鼠标、显示器等等，提供人与计算机的交互通信。 编译器*表层过程中高级指令可以使编程者更加便捷的表达，但计算机不易理解这些指令。编译器将高级语言程序解释为计算机需要的详细的低级程序指令，使得编程者可以自在思考并表达想法，并将想法写成的高级语言指令翻译为供计算机执行的一系列低级命令。编译器还可以将一份程序转换为适应各种不同机器的指令，使得编程只需一次。 1.5 高级计算机语言和编译器1.6 语言标准1.7 使用C语言的7个步骤 步骤并非是从初到末的，而是循环往复或不断变化的。编程步骤1、2比较重要，不能忽视。编写代码应尽量先进行规划，这将节省不少后续时间。 定义程序目标明确编程目标，对程序完成的事情有概念性的认识：希望通过编程对计算机提供什么资料，计算机需要进行何种处理，计算机输出什么结果。在此阶段不需要考虑具体的程序语法和程序代码。 设计程序思考程序矩体实现方法，呈现方式，预估程序编写时间。编写伪代码。 编写代码编写代码。注意编程规范性，适当添加注释。 编译运行编译器，将代码进行编译操作，并进行错误改正以及代码改善。 运行程序对编译通过的程序进行运行。 测试和调试程序对程序进行多种情况下的测试，尽可能发现程序缺陷或错误（Bug）检查程序是否能正常运行并达到预期目标。对错误情况进行调试（Debugging）。 维护和修改程序对程序后期使用进行故障修复、功能改善、功能添加等操作。 1.8 编程机制 文件名组成：基本名.扩展名 编译器与链接器C编程编写的源代码需要转换为可执行文件（机器语言代码）后才能运行，分两部来完成：编译和链接，分别用到编译器和链接器。 编译器*：将编写的各个源代码文件转换为中间代码（此时还不是最终执行的机器代码，仅仅是自己编写的代码相对应的机器代码，也称为目标代码），供后续链接器使用。 链接器*：将目标代码、系统标准启动代码、程序运行需要的库代码三者结合为一个可执行文件。 启动代码*：启动代码作用为连接操作系统与程序之间的接口。将程序需要的操作与操作系统用于实现相关功能的接口对应起来。 库代码*：一些基本或高频的C代码并不需要自己编写去实现，C程序库中自带一些相关代码，在程序中直接通过一些短指令来引用。引用语句并不能被机器直接运行，需要链接器在后期从C库中调出相关短指令代表的命令代码，并将短指令替换。 源代码文件应该是文本文件，不是字处理文件（字处理文件类似于word文件，除了文件本身包含的文字外，还包含许多字体颜色和格式等信息，不是纯文本文件）。 实际编程中易出现的一个问题：程序运行窗口在程序命令运行完之后瞬间消失。解决方法：在程序命令里的return语句之前添加如下一行代码 1getchar(); 该命令作用为读取一次键盘按键输入，效果为程序运行到此处时候只有按下回车键（Enter键）才继续运行。假若程序中此处已经有需要输入内容并等待回车的命令，则可以连续两次使用该代码 12getchar(); getchar(); 该重复一次的代码段意为先根据第一次按下的回车键来读取输入的数据，然后按第二行命令等待按下回车键来继续运行程序。（对于入门者此处无需过于理解，入门后自然明白）。 1.9 本书的组织结构1.10 本书的约定1.11 本章小结1.12 复习题 就编程而言，可移植性表示什么？一个程序的可移植性好，就是指它的源代码不经修改就可以在多种不同的计算机系统上编译成可以成功运行的程序。 解释源代码文件、目标代码文件和可执行文件之间的区别。源代码文件中包含着程序员使用任何语言编写的代码。目标代码文件包含着机器语言代码，它并不需要是完整的程序代码。可执行文件包含着组成可执行程序的全部机器语言代码。 编程的7个主要步骤是什么？a.定义程序目标;b.编写程序代码;c.编写程序代码;d.编译程序;e.运行程序;f.测试和调试程序;g.维护和修改程序; 编译器的任务是什么？编译器把源代码（例如，用C语言写成的代码）转换成机器语言代码，也称对象代码。 链接器的任务是什么？链接器把多个来源（例如，已编译的的源代码、库代码和启动代码）的目标代码连接成一个单独的可执行程序。 1.13 编程练习 您刚刚被MacroMuscle有限公司（Software for Hard Bodies）聘用。该公司要进入欧洲市场，需要一个将英寸转换为厘米（1英寸=2.54cm）的程序。他们希望建立的该程序可提示用户输入英寸值。您的任务是定义程序目标并设计该程序（编程过程的第1步和第2步）。 第二章 C语言概述章节内容 运算符= 函数：main()、printf() 编写一个简单的C程序 创建整型变量，为其赋值，并在屏幕上显示该值 换行字符 如何在程序中加入注释，建立包含多个函数的程序，以及造出程序中的错误 理解什么是关键字 2.1 简单的C程序示例 经典程序例子及解析 1234567891011#include &lt;stdio.h&gt;int main (void) //简单C程序例子&#123; int num; //定义名为num的一个变量 num = 1; //将num赋值为1 printf (\"I am a simple \"); //使用函数printf()输出内容 printf (\"computer.\\n\"); printf (\"My favorite number is %d because it is first.\\n\",num); return 0;&#125; 2.2 示例解释 C程序的各个部分及简要介绍 告诉编译器编译时包含stdio.h文件的所有内容（此文件对一些C语言的基本功能如输入接受和输出显示提供支持，这些功能的实现并不需要自己亲自编写）。 1#include &lt;stdio.h&gt; //包含另一个文件 对函数进行定义，C语言包含至少一个函数，上面的函数为其中比较基本的函数。格式：int是函数类型（函数有多种不同的类型，此处为整数类型函数。）；main()是函数的名字；main()括号中的void为函数接收值（函数运行时可以接受特定输入，void代表此函数不需要输入值。） 1int main(void) //函数名 这是注释，注释的作用是对代码做一定说明，对于机器没有任何意义，在编译的时候也会被机器全部忽略，只是为了日后查看代码或他人阅读代码的时候容易理解而建立。注释有两种，一种为行注释，一种为块注释。行注释用于简短的，一行或一行不到的注释使用，可以放在任意位置，在一行中，双斜线之后的所有内容均被认为是注释。对于块注释，结构由/和/组成，两者之间的所有内容无论几行，都被认为是注释。第二段代码为两种注释的例子(块注释代码显示效果有问题，代码是正确的)。 123456// 简单C程序例子//行注释/*块注释*/ 2.3 简单程序的结构2.4 提高程序可读性的技巧2.5 进一步使用C2.6 多个函数2.7 调试程序 对于编译器给出的错误提示，不必全部更改后再运行，可以先修改为首的几个，尝试运行后再决定是否继续修改。 编译器给出的错误位置一般要比真正的错误位置滞后一行。 编译器基本无法检测出语义错误。 可以通过在关键点处加入而外的printf()语句来查找语句错误，解决错误之后再删除相关测试用printf()语句。 把关键字或保留标识符用作变量名将会引起编译器报错。 2.11 复习题 如何称呼C程序的基本模块？ 什么是语法错误？给出它的一个英语例子和C语言例子。 什么是语义错误？给出它的一个英语例子和一个C语言例子。 Indiana Sloth已经编好了下面的程序，并想征求您的意见。请帮助他评定。 12345678include studio.hint main&#123;void&#125; /* 改程序可显示出一年中有多少周 /*(int ss: = 56:print (Tere are s weeks in a year.):return 0: 假设下面的每一个例子都是某个完整程序的一部分，它们每个将输出什么结果？ 1234567a.printf(\"Baa Baa Black Sheep.\"\"); printf(\"Have you any wool?\\n\");b.printf(\"Begone! \\nO vreature of lard!\");c.printf(\"What?\\nNo/nBonzo?\\n\");d.int num; num = 2; printf(\"%d + %d = Td\"), num, num, num + num); 下面哪几个是C的关键字？main,int,function,char,= 如何以下面的格式输出words和lines的值：”There were 3020 words and 350 lines”？这里，3020和350代表两个变量的值。 考虑下面的程序： 123456789101112#include&lt;studio.h&gt;int main(void)&#123;int a, b;a = 5;b = 2; /* 第7行 */b = a; /* 第8行 */a = b; /* 第9行 */printf(\"%d %d\\n\", b, a);return 0;&#125; 请问在第7行、第8行和第9行之后程序的状态分别是什么？ 2.12 编程练习 编写一个程序，调用printf()函数在一行上输出您的名和姓，再调用一次printf()函数在两个单独的行上输出您的名和姓，然后调用一对printf()函数在一行上输出您的名和姓。输出应如下所示（内容可换为自己的名和姓） 1234Anton BrucknerAntonBrucknerAnton Bruckner 编写一个程序输出您的姓名和地址 编写一个程序，把您的年龄转换成天数并显示二者的值。不用考虑平年（fractional year）和闰年（leap year）的问题。 编写一个能够产生下面输出的程序： 1234For he's a jolly good fellow！For he's a jolly good fellow!For he's a jolly good fellow!Which nobody can deny! 程序中除了main()函数之外，要使用两个用户定义的函数：一个用于把上面的夸奖消息输出一次；另一个用于把最后一行输出一次。 编写一个程序，创建一个名为toes的整数变量。让程序把toes设置为10，再让程序计算两个toes的和以及toes的平方。程序应该输出所有的3个值，并分别标识它们。 编写一个能够产生下列输出的程序： 123Smile!Smile!Smile!Smile!Smile!Smile! 在程序中定义一个能显示字符串Smile!一次的函数，并在需要时使用该函数。 编写一个程序，程序中要调用名为one_three()的函数。该函数要在一行中显示单词“one”，再调用two()函数，然后再在另一行中显示单词“three”。函数two()应该能在一行中显示单词“two”。main()函数应该在调用one_three()函数之前 显示短语“starting now:”,函数调用之后要显示“done!”。这样，最后的输出结果应该如下所示： 12345starting now!onetwothreedone! 第三章 数据和C章节内容 关键字：int, short, long, unsigned, char, float, double, _Bool, _Complex, _Imaginary 运算符：sizeof 函数：scanf() C使用的基本数据类型 整数类型和浮点数类型的区别 对上述类型，如何书写常量和声明变量 使用printf()和scanf()函数读写各种类型数据的值 3.1 示例程序 错误和警告：编译过程中错误消息标明程序中存在错误，不能对其进行编译。警告则表明尽管代码正确但有可能不是程序员所要的。警告不终止编译过程。 3.4 C数据类型总结：基本数据类型 关键字：基本数据类型使用11个关键字：int、long、short、unsigned、char、float、double、signed、_Bool、_Complex和_Imaginary。 第四章 字符串和格式化输入/输出第五章 运算符、表达式和语句第六章 C控制语句：循环第七章 C控制语句：分支和跳转第八章 字符输入/输出和输入确认第九章 函数第十章 数组和指针第十一章 字符串和字符串函数第十二章 存储类、链接和内存管理第十三张 /; j文件输入/输出第十四章 结构和其他数据形式第十五章 位操作第十六章 C预处理器和C库第十七章 高级数据表示 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2016/10/22/CPrimerPlus5th/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"Read","slug":"Read","permalink":"https://www.ezhq.xyz/categories/Read/"},{"name":"C","slug":"Read/C","permalink":"https://www.ezhq.xyz/categories/Read/C/"}],"tags":[{"name":"Read","slug":"Read","permalink":"https://www.ezhq.xyz/tags/Read/"},{"name":"C","slug":"C","permalink":"https://www.ezhq.xyz/tags/C/"}]},{"title":"联系的讨好","slug":"联系的讨好","date":"2016-10-16T14:00:00.000Z","updated":"2019-12-21T10:56:46.252Z","comments":true,"path":"2016/10/16/联系的讨好/","link":"","permalink":"https://www.ezhq.xyz/2016/10/16/%E8%81%94%E7%B3%BB%E7%9A%84%E8%AE%A8%E5%A5%BD/","excerpt":"","text":"联系的讨好一切烦恼源于越来越多的“联系”拥有了紧跟潮流的“聊天工具”失去的是以往倍感珍惜的共同时间得到了随时发送的机会，藐视了言语力量的摧残；得到了越来越多的途经，丧失了逐渐稀有的认真。随风而逝的，是时间、是认真、是珍惜、是思考力。喜好是用来表达的，而不是用来讨好的；一切以讨好为目的喜好，终将拖垮一个人的心智。 推荐音乐 网易云音乐：《Better off Alone》——Sissel 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2016/10/16/联系的讨好/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"随笔","slug":"随笔","permalink":"https://www.ezhq.xyz/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://www.ezhq.xyz/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"音乐如生活","slug":"音乐如生活","date":"2016-10-11T14:00:00.000Z","updated":"2019-12-21T10:56:46.252Z","comments":true,"path":"2016/10/11/音乐如生活/","link":"","permalink":"https://www.ezhq.xyz/2016/10/11/%E9%9F%B3%E4%B9%90%E5%A6%82%E7%94%9F%E6%B4%BB/","excerpt":"","text":"音乐如生活 某种程度上音乐颇具私人性质没有不好听的音乐只有不爱听的音乐 听音乐的快餐化、浅显化使得每个人都成了“音乐评论人” 大神歌单百度百科神级评论……都在无下限地拉低拉低继续拉低音乐的正式感 静心独听乐队背景音乐风格发展Wikipedia的专业介绍……逐渐探索了解音乐 而后才能在某个夜晚或心灰意冷或寂寞难耐或平心静气或欣喜若狂或……与某首音乐产生心灵的碰撞引发无穷共鸣 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2016/10/11/音乐如生活/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"随笔","slug":"随笔","permalink":"https://www.ezhq.xyz/categories/%E9%9A%8F%E7%AC%94/"},{"name":"随想","slug":"随笔/随想","permalink":"https://www.ezhq.xyz/categories/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E6%83%B3/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://www.ezhq.xyz/tags/%E9%9A%8F%E7%AC%94/"},{"name":"随想","slug":"随想","permalink":"https://www.ezhq.xyz/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"MATLAB_闰年判断与闰年输出","slug":"MATLAB_闰年判断与闰年输出","date":"2016-09-19T04:00:00.000Z","updated":"2017-03-09T04:00:00.000Z","comments":true,"path":"2016/09/19/MATLAB_闰年判断与闰年输出/","link":"","permalink":"https://www.ezhq.xyz/2016/09/19/MATLAB_%E9%97%B0%E5%B9%B4%E5%88%A4%E6%96%AD%E4%B8%8E%E9%97%B0%E5%B9%B4%E8%BE%93%E5%87%BA/","excerpt":"","text":"最新更新：20170309 代码下列代码仅供参考 1234567891011121314151617181920%RunNian1900-2016_ezhqfunction leapyearfor year = 1900:2016 sign = 0; a = rem(year,400); b = rem(year,4); c = rem(year,100); if a == 0 sign = sign + 1; end if b == 0 sign = sign + 1; end if c == 0 sign = sign - 1; end if sign == 1 fprintf('%4d \\n',year) endend 运行结果运行结果截图 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2016/09/19/MATLAB_闰年判断与闰年输出/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"Dev","slug":"Dev","permalink":"https://www.ezhq.xyz/categories/Dev/"},{"name":"MATLAB","slug":"Dev/MATLAB","permalink":"https://www.ezhq.xyz/categories/Dev/MATLAB/"}],"tags":[{"name":"Dev","slug":"Dev","permalink":"https://www.ezhq.xyz/tags/Dev/"},{"name":"MATLAB","slug":"MATLAB","permalink":"https://www.ezhq.xyz/tags/MATLAB/"}]},{"title":"三维作品2016B","slug":"三维作品2016B","date":"2016-08-31T15:00:00.000Z","updated":"2019-12-21T10:56:46.252Z","comments":true,"path":"2016/08/31/三维作品2016B/","link":"","permalink":"https://www.ezhq.xyz/2016/08/31/%E4%B8%89%E7%BB%B4%E4%BD%9C%E5%93%812016B/","excerpt":"","text":"2016B八月 棋局斑马球·棋局未定，世事无常 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2016/08/31/三维作品2016B/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"个人作品","slug":"个人作品","permalink":"https://www.ezhq.xyz/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"},{"name":"C4D","slug":"个人作品/C4D","permalink":"https://www.ezhq.xyz/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/C4D/"}],"tags":[{"name":"个人作品","slug":"个人作品","permalink":"https://www.ezhq.xyz/tags/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"},{"name":"C4D","slug":"C4D","permalink":"https://www.ezhq.xyz/tags/C4D/"}]},{"title":"三维作品2016A","slug":"三维作品2016A","date":"2016-08-31T14:00:00.000Z","updated":"2019-12-21T10:56:46.252Z","comments":true,"path":"2016/08/31/三维作品2016A/","link":"","permalink":"https://www.ezhq.xyz/2016/08/31/%E4%B8%89%E7%BB%B4%E4%BD%9C%E5%93%812016A/","excerpt":"","text":"2016A 银河之光·心有世界，映射万物 静语·每个人、每件事物，都如艺术，静语相遇，共鸣知己 切刀矩体·横看成岭侧成峰，自有风格，别具一格 几何静物·初期的接触，是新鲜的、基本的 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2016/08/31/三维作品2016A/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"个人作品","slug":"个人作品","permalink":"https://www.ezhq.xyz/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"},{"name":"C4D","slug":"个人作品/C4D","permalink":"https://www.ezhq.xyz/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/C4D/"}],"tags":[{"name":"个人作品","slug":"个人作品","permalink":"https://www.ezhq.xyz/tags/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"},{"name":"C4D","slug":"C4D","permalink":"https://www.ezhq.xyz/tags/C4D/"}]},{"title":"百度云不限速版安装使用教程","slug":"百度云不限速版安装使用教程","date":"2016-08-17T14:00:00.000Z","updated":"2019-12-21T10:56:46.252Z","comments":true,"path":"2016/08/17/百度云不限速版安装使用教程/","link":"","permalink":"https://www.ezhq.xyz/2016/08/17/%E7%99%BE%E5%BA%A6%E4%BA%91%E4%B8%8D%E9%99%90%E9%80%9F%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","excerpt":"","text":"最新更新：20170309 更新说明：百度云已经无法使用此法进行不限速下载，之前使用此法登陆并使用的可以继续使用，一旦切换账号将无法在此成功登陆。可暂时使用第三方账号登陆，进行下载。 需要文件 百度云管家（自行google搜索下载，本例子为单文件版） 提示此文件为单文件版，即下载下来就直接可以运行使用，无需安装过程。故想让他“安装”在哪里，直接放在哪里即可。至于以后如何找到这个程序，可以在放到想到放的地方后，右键单击此程序，选择“发送到”——“桌面快捷方式”来在桌面上创建快捷图表。对于Windows10，还可以右键单击此程序，选择“固定到‘开始’屏幕”，来直接固定到windows10开始菜单中的磁贴处。 软件安启动步骤 双击下载好的程序 若出现系统安全方面的警告，点击“是”或“允许”。若没有相关提示，则跳过此步骤。 在软件启动界面输入用户账号和密码。可以自主选择是否“记住密码”（以后可以直接选择需要登陆的账户，免去手动输入的过程）、“自动登陆”（软件可以跳过登陆过程，直接进入主界面） 软件相关设置推荐 基本设置 传输设置 安全设置 提醒设置 不限速下载进入方式 选择要下载的文件并开始下载后，点击主界面右上方绿色“传输列表”方块，进入传输列表界面。 在界面出现红色“立即试用”按钮后，点击即可。（下载小文件时候不会出现试用按钮） 版权声明创作站点：ezhq.xyz本文作者：ezhq本文链接：http://ezhq.xyz/2016/08/17/百度云不限速版安装使用教程/版权备注：任何形式使用本作品需保留本完整版权声明，使用本作品前应先和作者取得联系并说明用途，取得作者同意后方可使用。详细了解请点击上方本文作者以取得邮箱联系。","categories":[{"name":"教程","slug":"教程","permalink":"https://www.ezhq.xyz/categories/%E6%95%99%E7%A8%8B/"},{"name":"百度云","slug":"教程/百度云","permalink":"https://www.ezhq.xyz/categories/%E6%95%99%E7%A8%8B/%E7%99%BE%E5%BA%A6%E4%BA%91/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://www.ezhq.xyz/tags/%E6%95%99%E7%A8%8B/"},{"name":"百度云","slug":"百度云","permalink":"https://www.ezhq.xyz/tags/%E7%99%BE%E5%BA%A6%E4%BA%91/"}]},{"title":"第一笔","slug":"第一笔","date":"2016-08-16T05:04:00.000Z","updated":"2016-12-01T14:58:11.000Z","comments":true,"path":"2016/08/16/第一笔/","link":"","permalink":"https://www.ezhq.xyz/2016/08/16/%E7%AC%AC%E4%B8%80%E7%AC%94/","excerpt":"","text":"千山万岭独行，千军万马不惊，千招万式精炼，千万事件小灵。","categories":[{"name":"纪念日","slug":"纪念日","permalink":"https://www.ezhq.xyz/categories/%E7%BA%AA%E5%BF%B5%E6%97%A5/"}],"tags":[{"name":"纪念日","slug":"纪念日","permalink":"https://www.ezhq.xyz/tags/%E7%BA%AA%E5%BF%B5%E6%97%A5/"}]}]}